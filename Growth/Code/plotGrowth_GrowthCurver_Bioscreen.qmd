---
title: "Growth comparison with GrowthCurver analysis"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Introduction

This notebook includes the Bioscreen experiment comparing the growth of C.phytofermentans WT in GS2 medium containing different concentrations of inhibitor. In the first section, we compare growth at different concentrations on the same plot (mean +/-SD). In the second section, we analyze the mean OD600s for each treatment using the R package Growthcurver, which calculates growth curve parameters by fitting the data to a logistic model.

# Methods

```{r setup, echo=FALSE, message=FALSE}

# General setup code

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

library(tidyverse);
library(readxl);
library(readr);

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
               axis.title.x = element_text(size = 8), 
               axis.title.y = element_text(size = 8),
               strip.text.x = element_text(size = 6),
               legend.position = "bottom", 
               aspect.ratio =1);

```

## File I/O

```{r File IO}

# input file
file.in = "growthData_Bioscreen.xlsx";
path.in = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Growth/Data";
data.in = paste(path.in, file.in, sep = "");

```

## Define functions

```{r run_growthcurver}

# function to run Growthcurver analysis.

run_growthcurver = function(growth.treatment)
{
# select cols of interest
growth.fit = growth.treatment %>%
    select(time, OD600_mean);

# calc growth rate information
gc_fit = SummarizeGrowthByPlate(growth.fit, bg_correct = "none");

# components of SummarizeGrowthByPlate object
k_maxOD = gc_fit$k;  # carrying capacity
n0_minOD = gc_fit$n0; # initial OD600
r_intrinsicGrowth = gc_fit$r; # intrinsic growth rate
genTime_hours = gc_fit$t_gen; # generation time
auc_areaCurve = gc_fit$auc_l; # AUC, integral of logistic eq
auc_areaTrapezoid = gc_fit$auc_e; # AUC, area of trapezoid
sigma_fit = gc_fit$sigma; # goodnesss of fit of the parameters of the logistic equation (residual standard error from the nonlinear regression model).
my_note = gc_fit$note; # note if poor fit

# make data.frame of fit data
Butanol_Percent = growth.treatment$Butanol_Percent[1];
fitdata = data.frame(Butanol_Percent, k_maxOD, n0_minOD, r_intrinsicGrowth, genTime_hours, sigma_fit, my_note);
return(fitdata);
}

```

## Organize data for plotting

```{r organize data for plotting}

plate.map = read_excel(data.in, sheet = "Information", col_names = TRUE, skip = 3);
growth.data = read_excel(data.in, sheet = "Raw", col_names = TRUE, skip = 2);

# file-specific variables
my.sep = "-"; # treatment separator
first.well = "112";
last.well = "189";

# parse platemap
plate.map = plate.map %>%
  filter(!Treatment == "empty") %>%
  filter(Well >= 112) %>% # focus on butanol wells
  separate(Treatment, c("Dilution", "Dash", "Butanol_Percent", "Butanol"), sep = " ") %>%
  mutate(Butanol_Percent = str_match(Butanol_Percent, pattern="^[\\d\\.]+")) %>%
  select(Well, Dilution, Butanol_Percent);
  
# calculate elapsed time in hours
time1 = hms("00:00:00");
growth.data= growth.data %>%
  mutate(Time_hms = hms(Time)) %>%
  mutate(Time_Elapsed = Time_hms - time1) %>%
  mutate(Hours = hour(Time_Elapsed) + 
         (minute(Time_Elapsed) / 60) + 
         (second(Time_Elapsed)/3600));

# pivot to long data
growth.data.long = growth.data %>%
  select(Time, Hours, first.well:last.well) %>%
  pivot_longer(cols = first.well:last.well, names_to = "Well", values_to = "OD600");

# add treatment info
growth.data.long$Well = as.numeric(growth.data.long$Well);
growth.data.all = inner_join(growth.data.long, plate.map, by = "Well");

# get mean blank measurement at each time
blanks.all = growth.data.all %>%
  filter(Dilution == "Blank") %>%
  group_by(Hours) %>%
  summarize(Blank_mean = mean(OD600)) %>%
  ungroup();

# subtract mean blank from all OD measurements
growth.data.all.mb = left_join(growth.data.all, blanks.all, by = "Hours");
growth.data.all.mb = growth.data.all.mb %>%
  mutate(OD600 = OD600 - Blank_mean) %>%
  select(Time, Hours, Well, OD600, Dilution, Butanol_Percent);

# calculate means, sds 
growth.data.all.mb = growth.data.all.mb %>%
  group_by(Hours, Dilution, Butanol_Percent) %>%
  mutate(OD600_mean = mean(OD600), OD600_sd = sd(OD600));

```

## Organize data for Growthcurver analysis.

```{r organize data for growthcurver}

library(growthcurver);

# focus on dilution = 1/10 data
data.gr = growth.data.all.mb %>%
  filter(Dilution == "1/10");

data.gr = data.gr %>%
  rename(time = Hours); # growthcurver requirement

# make data.frame of mean OD600 curve for each treatment
data.gr = data.gr %>%
  group_by(time, Butanol_Percent) %>% # group by time and treatment
  summarize(OD600_mean = OD600_mean) %>%
  ungroup %>%
  distinct();

# focus on data only up to the time of maxOD (log phase growth)

# data.frame of maxODs foreach treatment
data.maxOD = data.gr %>%
  group_by(Butanol_Percent) %>%
  mutate(maxOD = max(OD600_mean)) %>%
  filter(OD600_mean == maxOD);

# filter for first time OD reaches max OD
data.maxOD = data.maxOD %>%
  group_by(Butanol_Percent) %>%
  arrange(time) %>%
  filter(row_number()==1) %>%
  ungroup() %>%
  mutate(time_maxOD = time) %>%
  select(Butanol_Percent, time_maxOD);

data.gr = left_join(data.gr, data.maxOD, by = "Butanol_Percent");
data.gr = data.gr %>%
  filter(time < time_maxOD) %>%
  select(time, OD600_mean, Butanol_Percent);

```

## Growthcurver calculations

```{r calculate Growthcurver data}

# get list of treatments
treatments = unique(data.gr$Butanol_Percent);

# declare empty data.frame for fit data
fit.data.all = data.frame(Butanol_Percent = character(),
                      k_maxOD = double(),
                      n0_minOD = double(),
                      r_intrinsicGrowth = double(),
                      genTime_hours = double(),
                      sigma_fit = double(),
                      my_note = character());

for (treat in treatments)
{
  data.fit = data.gr %>%
    filter(Butanol_Percent == treat);
  fit.data = run_growthcurver(data.fit);
  fit.data.all = rbind(fit.data.all, fit.data);
}
  
# # add fit data to growthdata
growthdata= left_join(data.gr, fit.data.all, by="Butanol_Percent");
 growthdata = growthdata %>%
 mutate(my_fit = k_maxOD / (1 + (((k_maxOD - n0_minOD) / n0_minOD) * exp(1)^-(r_intrinsicGrowth * time))));


```

# Results

## Plot growth data.

```{r plot growth data, fig.cap = "Fig: growth of C.phytofermentans strains at different concentrations (v/v) of butanol. Left plot shows 1/10 diluted cells and right plot shows 1/5 diluted cells. Plot shows mean OD600 +/- SD."}

growth.plot = ggplot(growth.data.all.mb, aes(x=Hours, y=OD600_mean, group=Butanol_Percent, color=Butanol_Percent)) +
  geom_line(size=0.2, color='black') +
  geom_point(size=0.5) +
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
  geom_line(aes(x=Hours, y=(OD600_mean + OD600_sd)))+
  geom_line(aes(x=Hours, y = (OD600_mean - OD600_sd)))+
  facet_wrap(~ Dilution) +
  coord_cartesian(
    xlim = c(0, 84), 
    ylim = c(0, max(growth.data.all.mb$OD600_mean + 0.2)))+
  scale_x_continuous(breaks=seq(0, 84, 12))+
  scale_y_continuous(breaks=seq(0, max(growth.data.all.mb$OD600_mean + 0.2), 0.4))+
  guides(color=guide_legend("Butanol Percent (v/v)"))+
  theme_classic()+
  mytheme;

growth.plot

ggsave(filename = data.out, plot = growth.plot);
```

## Plot Growthcurver data

```{r plot Growthcurver, fig.cap = "Fig. Growth plots for each treatment. Treatment names are shown above plot. Black curves shows mean OD600; red curves show Growthcurver fit."}

growthplots = ggplot(growthdata, aes(x=time, y=OD600_mean))+
 facet_wrap(~Butanol_Percent)+
 geom_line(size=0.2, color='black') +
 geom_line(aes(x=time, y=my_fit), color='red')+
 geom_point(size=0.25) +
 xlab("time") + ylab("OD(600)")+
 coord_cartesian(
    xlim = c(0, 20), 
    ylim = c(0, 1.2))+
 theme_classic()+
 mytheme;

growthplots

```

Table of Growthcurver parameters

```{r Table growthcurver}
  
table1 = kable(fit.data.all, caption = "Growth curve data for each treatment. ");
table1

```

# Conclusions

WT grew partially at 0.5% butanol (max OD = 0.6), but shows little growth at 0.75% butanol and above.
