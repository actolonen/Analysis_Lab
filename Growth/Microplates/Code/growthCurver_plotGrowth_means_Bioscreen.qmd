---
title: "Bioscreen: C.phy growth plots"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Introduction

This notebook analyzes the Bioscreen expt of *C. phytofermentans* WT growing in media with different inhibitor concentrations.

# Methods

## Set up

```{r setup, echo=FALSE, message=FALSE}

# General setup code

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

library(tidyverse);
library(readxl);
library(readr);
library(gridExtra);

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
               axis.title.x = element_text(size = 8), 
               axis.title.y = element_text(size = 8),
               strip.text.x = element_text(size = 4),
               #legend.position = "bottom", 
               legend.text = element_text(size=4),
               aspect.ratio =0.5);
```

## File I/O

```{r File IO}

# input file
file.in = "growthData_Bioscreen.xlsx";
path.in = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Growth/Microplates/Data";
data.in = paste(path.in, file.in, sep = "/");

```

## Functions

### Growthcurver function

```{r run_growthcurver}

# function to run Growthcurver analysis.
# input = data.frame(Hours, Treatment, OD600_mean, OD600_sd)
# output = 

run_growthcurver = function(growth.treatment)
{
# select cols of interest
growth.fit = growth.treatment %>%
  select(Hours, OD600_mean) %>%
  rename(time = Hours) %>% # growthcurver requirement
  mutate(blank = 0);

# calc growth rate information
gc_fit = SummarizeGrowthByPlate(growth.fit, bg_correct = "blank");
gc_fit = gc_fit %>%
  slice(-2); # get rid of blank data

# components of SummarizeGrowthByPlate object
k_maxOD = gc_fit$k;  # carrying capacity
n0_minOD = gc_fit$n0; # initial OD600
r_intrinsicGrowth = gc_fit$r; # intrinsic growth rate
genTime_hours = gc_fit$t_gen; # generation time
auc_areaCurve = gc_fit$auc_l; # AUC, integral of logistic eq
auc_areaTrapezoid = gc_fit$auc_e; # AUC, area of trapezoid
sigma_fit = gc_fit$sigma; # goodnesss of fit of the parameters of the logistic equation (residual standard error from the nonlinear regression model).
my_note = gc_fit$note; # note if poor fit

# make data.frame of fit data
Treatment = growth.treatment$Treatment[1];
fitdata = data.frame(Treatment, k_maxOD, n0_minOD, r_intrinsicGrowth, genTime_hours, sigma_fit, my_note);
return(fitdata);
}
```

## Organize data for plotting

Organize data into tidy data.frame

```{r Organize Bioscreen data for plots}

# output is data.frame = [Hours, Well, OD600, Treatment]

plate.map = read_excel(data.in, sheet = "Informations", col_names = TRUE, skip = 4);
growth.data = read_excel(data.in, sheet = "Raw data", col_names = TRUE, skip = 2);

# plate map variables
first.well = "12";
last.well = "189";

# parse plate.map
plate.map = plate.map %>%
  filter(!Treatment == "empty") %>%
  mutate(Well = as.character(Well));
  
# calculate elapsed time in hours
time1 = hms("00:00:00"); # start time
growth.data = growth.data %>%
  mutate(Time_hms = hms(Time)) %>%
  mutate(Time_Elapsed = Time_hms - time1) %>%
  mutate(Hours = hour(Time_Elapsed) + 
         (minute(Time_Elapsed) / 60) + 
         (second(Time_Elapsed)/3600));
  
growth.data.long = growth.data %>%
  select(-Blank) %>%
  dplyr::select(Hours, first.well:last.well) %>%
  pivot_longer(cols = first.well:last.well, names_to = "Well", values_to = "OD600");
growth.data.long$OD600 = as.numeric(growth.data.long$OD600);

# remove contaminated wells
#growth.data.long = growth.data.long %>%
#  filter(!Well %in% c("A04", "A05", "A06", "C03", "E02", "G01", "G04", "G05"));

# add treatment info
growth.all = inner_join(growth.data.long, plate.map, by = "Well");

# print out first lines of data.frame
table.growth = kable(growth.all, caption = "Table: tidy growth data");
table.growth

```

# Results

## Plot Individual wells

Plot blanks

```{r Plot blanks, fig.cap = "Fig 1. OD600 of blank treatments (no cells). Each curve is a well."}

growth.blanks = growth.all %>%
  filter(grepl("Blank", Treatment));

plot.blanks = ggplot(growth.blanks, aes(x=Hours, y=OD600, group=Well)) +
  geom_point(size=1, color = "green") +
  geom_line(size=0.1, color='black') +
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
  coord_cartesian(
    xlim = c(0, max(growth.blanks$Hours)), 
    ylim = c(0, max(growth.blanks$OD600) + 0.2))+
  facet_wrap (~Treatment, ncol=2)+
  scale_x_continuous(breaks=seq(0, max(growth.blanks$Hours), 12))+
  scale_y_continuous(breaks=seq(0, max(growth.blanks$OD600 + 0.1), 0.05))+
  theme_classic()+
  mytheme;

grid.arrange(plot.blanks, ncol=1);



```

Subtract blanks from wells with cells.

```{r subtract blanks}

growth.cells = growth.all %>%
  filter(grepl("Inhibitor", Treatment));

# subtract initial reading from OD measurements
temp = growth.cells %>%
  slice(1);
initial.time = temp$Hours;

initial.OD = growth.cells %>%
  filter(Hours == initial.time) %>%
  rename(OD600_t0 = OD600) %>%
  select(Well, OD600_t0);
growth.cells = left_join(growth.cells, initial.OD, by = "Well");
growth.cells = growth.cells %>%
  mutate(OD600 = OD600 - OD600_t0) %>%
  select(-OD600_t0);

```

Plot growth in well with cells

```{r plot Growth, fig.cap = "Fig 2. Growth (OD600) of treatments with C.phy. Each curve is a well."}

plot.cells = ggplot(growth.cells, aes(x=Hours, y=OD600, group=Well)) +
  geom_point(size=.05, color = "blue") +
  geom_line(size=0.1, color='black') +
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
  coord_cartesian(
    xlim = c(0, max(growth.cells$Hours)), 
    ylim = c(-0.05,  max(growth.cells$OD600) + 0.1))+
  facet_wrap (~Treatment, ncol=2)+
  scale_x_continuous(breaks=seq(0, max(growth.cells$Hours), 24))+
  scale_y_continuous(breaks=seq(0, max(growth.cells$OD600 + 0.1), 0.4))+
  theme_classic()+
  mytheme;

grid.arrange(plot.cells, ncol=1);


```

## Plot treatment means +/SD

### Calculate treatment means/sd

```{r calc treatment means}

growth.cells.means = growth.cells %>%
  group_by(Hours, Treatment) %>%
  mutate(OD600_mean = mean(OD600)) %>%
  mutate(OD600_sd = sd(OD600)) %>%
  ungroup() %>%
  select(-Well, -OD600) %>%
  distinct();

```

```{r plot means, fig.cap = "Fig 3. Growth (OD600) of treatments with C.phy. Plot shows treatment means +/-SD."}

 
plot.cells.means = ggplot(growth.cells.means, aes(
    x=Hours, 
    y=OD600_mean, 
    ymin = OD600_mean - OD600_sd,
    ymax = OD600_mean + OD600_sd)) +
  geom_point(size=.05, color = "blue") +
  geom_line(size=0.1, color='black') +
  geom_errorbar(width = 0, color = "blue")+
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
  coord_cartesian(
    xlim = c(0, max(growth.cells$Hours)), 
    ylim = c(-0.05,  max(growth.cells$OD600) + 0.1))+
  facet_wrap (~Treatment, ncol=2)+
  scale_x_continuous(breaks=seq(0, max(growth.cells$Hours), 24))+
  scale_y_continuous(breaks=seq(0, max(growth.cells$OD600 + 0.1), 0.4))+
  theme_classic()+
  mytheme;

grid.arrange(plot.cells.means, ncol=1);

```

## Compare treatment means

C.phy growth at different inhibitor concentrations (1/10 initial dilution)

```{r growth inhibitor 1/10, fig.cap="Fig 4. Growth (OD600) of treatments with C.phy growing in media with different inhibitor concentrations. Plot shows treatment means +/-SD."}

growth.cells.inhibitor = growth.cells.means %>%
  separate(Treatment, c("Dilution", "Treatment"), sep="-") %>%
  filter(grepl("1/10", Dilution));

plot.cells.inhibitor.10 = ggplot(growth.cells.inhibitor, aes(
    x=Hours, 
    y=OD600_mean, 
    group=Treatment,
    color=Treatment,
    ymin = OD600_mean - OD600_sd,
    ymax = OD600_mean + OD600_sd)) +
  geom_point(size=.05) +
  geom_line(size=0.1, color='black') +
  geom_errorbar(width = 0)+
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
  coord_cartesian(
    xlim = c(0, max(growth.cells$Hours)), 
    ylim = c(-0.05,  max(growth.cells$OD600) + 0.1))+
  scale_x_continuous(breaks=seq(0, max(growth.cells$Hours), 12))+
  scale_y_continuous(breaks=seq(0, max(growth.cells$OD600 + 0.1), 0.1))+
  theme_classic()+
  mytheme;

grid.arrange(plot.cells.inhibitor.10, ncol=1);



```

C.phy growth at different inhibitor concentrations (1/5 initial dilution)

```{r growth inhibitor 1/5, fig.cap="Fig 5. Growth (OD600) of treatments with C.phy growing in media with different inhibitor concentrations. Plot shows treatment means +/-SD."}

growth.cells.inhibitor = growth.cells.means %>%
  separate(Treatment, c("Dilution", "Treatment"), sep="-") %>%
  filter(grepl("1/5", Dilution));

plot.cells.inhibitor.5 = ggplot(growth.cells.inhibitor, aes(
    x=Hours, 
    y=OD600_mean, 
    group=Treatment,
    color=Treatment,
    ymin = OD600_mean - OD600_sd,
    ymax = OD600_mean + OD600_sd)) +
  geom_point(size=.05) +
  geom_line(size=0.1, color='black') +
  geom_errorbar(width = 0)+
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
  coord_cartesian(
    xlim = c(0, max(growth.cells$Hours)), 
    ylim = c(-0.05,  max(growth.cells$OD600) + 0.1))+
  scale_x_continuous(breaks=seq(0, max(growth.cells$Hours), 12))+
  scale_y_continuous(breaks=seq(0, max(growth.cells$OD600 + 0.1), 0.1))+
  theme_classic()+
  mytheme;

grid.arrange(plot.cells.inhibitor.5, ncol=1);

```

## Growthcurver analysis

### Growthcurver calculations

Selection only log-phase growth measurements to permit logistic fit

```{r grab log phase}

# focus on data only up to the time of maxOD (log phase growth)

# data.frame of maxODs foreach treatment
data.maxOD = growth.cells.means %>%
  group_by(Treatment) %>%
  mutate(maxOD = max(OD600_mean)) %>%
  filter(OD600_mean == maxOD);

# filter for first time OD reaches max OD
data.maxOD = data.maxOD %>%
  group_by(Treatment) %>%
  arrange(Hours) %>%
  filter(row_number()==1) %>%
  ungroup() %>%
  mutate(time_maxOD = Hours) %>%
  select(Treatment, time_maxOD);

growth.cells.means.log = left_join(growth.cells.means, data.maxOD, by = "Treatment");
growth.cells.means.log = growth.cells.means.log %>%
  filter(Hours < (time_maxOD + 3)) %>%
  select(Hours, Treatment, OD600_mean);

```

```{r calculate Growthcurver data}

# get list of treatments
treatments = unique(growth.cells.means.log$Treatment);

# declare empty data.frame for fit data
fit.data.all = data.frame(Treatment = character(),
                      k_maxOD = double(),
                      n0_minOD = double(),
                      r_intrinsicGrowth = double(),
                      genTime_hours = double(),
                      sigma_fit = double(),
                      my_note = character());

for (my.treatment in treatments)
{
  data.fit = growth.cells.means.log %>%
    filter(Treatment == my.treatment);
  fit.data = run_growthcurver(data.fit);
  fit.data.all = rbind(fit.data.all, fit.data);
}
  
# add fit data to growthdata
growth.cells.fit = left_join(growth.cells.means.log, fit.data.all, by="Treatment");
 growth.cells.fit = growth.cells.fit %>%
 mutate(my_fit = k_maxOD / (1 + (((k_maxOD - n0_minOD) / n0_minOD) * exp(1)^-(r_intrinsicGrowth * Hours))));
```

### Plot growthcurver data

```{r plot Growthcurver, fig.cap = "Fig. Growth plots for each treatment. Treatment names are shown above plot. Black curves shows mean OD600; red curves show Growthcurver fit."}

# subsample data for plotting
growth.cells.fit.plot = growth.cells.fit %>%
 filter(round(Hours, 2) %% 2 ==0);

fitplots = ggplot(growth.cells.fit.plot, aes(x=Hours, y=OD600_mean))+
 facet_wrap(~ Treatment)+
 #geom_line(size=0.2, color='black') +
 geom_point(size=1) +
 geom_line(aes(x=Hours, y=my_fit, color = 'red'))+
 xlab("time") + ylab("OD(600)")+
 coord_cartesian(
    xlim = c(0, 80), 
    ylim = c(0, 1.2))+
 theme_classic()+
 mytheme;

fitplots
```

### Growthcurver table

```{r Table growthcurver}

growth.cells.fit.table = growth.cells.fit %>%
  select(Treatment, k_maxOD, r_intrinsicGrowth, genTime_hours, sigma_fit) %>%
  mutate(k_maxOD = round(k_maxOD, 2)) %>%
  mutate(genTime_hours = round(genTime_hours, 2)) %>%
  mutate(r_intrinsicGrowth = round(r_intrinsicGrowth, 2)) %>%
  mutate(sigma_fit = round(sigma_fit, 2)) %>%
  distinct();
  
table1 = kable(growth.cells.fit.table, caption = "Growth curve data for each treatment. ");
table1
```

# Conclusions