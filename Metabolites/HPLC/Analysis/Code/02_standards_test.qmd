---
title: "HPLC: compute linear model to quantify compounds in standard solution"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
execute:
  engine: /home/tolonen/.conda/envs/fermlab2/bin/R
---

# Introduction

This notebook quantifies the peak areas of compounds using a dilution series of standards (see Table I below). The peak areas of the compounds at different concentrations are used to compute a linear model correlating peak area and compound concentration (mM). The output is a file containing parameters of the linear model (slope, intercept) that can be applied to calculate compound concentrations in the experimental samples.

The chromatograms are extracted from the .lcd files using chromConverter. These HPLC files include data from 3 channels: RID, UV 210 nm, and UV 260 nm. Thus, linear models are calculated for all metabolites in STD1 using the RID detector and just the acids (formate, acetate) using the UV 210 nm detector.

The user must select one of two alternative methods to background-normalize the chromatogram values prior to calculation of the the peak areas:

1.  The chromatogram intensities are normalized by subtracting the mode intensity of in the chromatogram.
2.  The chromatogram intensities are normalized by subtracting the mean of the boundary intensities of the peak.

# Setup

Libaries

```{r setup, message=FALSE}

rm(list = ls());

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);

# standard libraries
library(tidyverse);
library(stringr);
library(readr);
library(gridExtra);
library(readxl);

# specific libraries
library(modeest); # calc mode
library(DescTools); # AUC method

```

Flags/config

```{r flags}

# define method to calculate peak areas. 
#peak.method = "mode";
peak_method = "boundaries";

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
                axis.title.x = element_text(size = 8), 
                axis.title.y = element_text(size = 8),
                strip.text.x = element_text(size = 6),
                legend.position = "bottom", 
                aspect.ratio =0.5,
                plot.title = element_text(size = 8),
               );


```

File IO

```{r file IO}

# input: sample information file

# input: directory to read sample information file
info.file = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/information_HPLC_DATE.xlsx";
standards = read_excel(info.file, sheet = "Standards", col_names = TRUE, skip = 2);
samples = read_excel(info.file, sheet = "Samples", col_names = TRUE, skip = 2);

# input: directory to read with .lcd files
lcd.input.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/LCD_LabSolutions";

# input: directory of .txt files
txt.input.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/ChromConverter";

if (!dir.exists(txt.input.dir)) 
{
  dir.create(txt.input.dir);
}

# output: directory of analysis files
analysis.output.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/Analysis";

if (!dir.exists(analysis.output.dir)) 
{
  dir.create(analysis.output.dir);
}

# output: file of linear model
table.out = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/Analysis/standards_linear-model.tsv";

```

# Functions

Method 1: background-normalize chromatograms using mode intensity

```{r normalize chromatograms using mode intensity}

norm_mode = function(chroms_all, my_detector, peak_start, peak_end)
{
  
# calc background-normalized intensity for each file 
chroms.peak.norm = chroms_all %>%
  filter(Detector == my_detector) %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    mutate(Intensity_norm  = Intensity - Background) %>%
    filter(Minutes > peak_start & Minutes < peak_end) %>%
  ungroup();

# return normalized chromatogram of peak for detector of interest.
return(chroms.peak.norm);
}

```

Method 2: background-normalize chromatograms using peak boundaries

```{r normalize chromatograms using peak boundaries}

norm_boundaries = function(chroms_all, my_detector, peak_start, peak_end)
{

# calc background-normalized intensity for each file 
chroms.peak.norm = chroms_all %>%
  group_by(File) %>%
    filter(Detector == my_detector) %>%
    filter(Minutes > peak_start & Minutes < peak_end) %>%
    mutate(Intensity_first = dplyr::first(Intensity)) %>%
    mutate(Intensity_last= dplyr::last(Intensity)) %>%
    mutate(Intensity_base = (Intensity_first + Intensity_last)/2) %>%
    mutate(Intensity_norm = Intensity - Intensity_base) %>%
  ungroup();

return(chroms.peak.norm);
}

```

Calculate peak areas for a compound

```{r calculate peak areas for compound of interest}

# input = data.frame chroms.peak = Minutes, Intensity, Sample, File
# output = data.frame areas.all = Area, Concentration_mM, Sample, File

calc_areas = function(chroms.peak.norm, my_compound, my_detector)
{

# calc peak area for each file
chroms.peak.norm = chroms.peak.norm %>%
  filter(Detector == my_detector) %>%
  group_by(File) %>%
    mutate(Area = AUC(Minutes, Intensity_norm, method = 'trapezoid')) %>%
  ungroup();

# format data frame
areas.all = chroms.peak.norm %>%
  select(Area, Sample, File, Detector) %>%
  distinct();

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my_compound);

areas.concs = left_join(areas.all, standards.compound, by="Sample");

areas.concs = areas.concs %>%
  mutate(Concentration_mM = as.numeric(Concentration_mM)) %>%
  select(-File.y) %>%
  rename(File = File.x);

return(areas.concs);
}

```

Calculate linear model

```{r calculate linear model}

# input = areas.concs = data.frame: Concentration_mM, peak area

calc_linearModel = function(my_compound, peak_start, peak_end, my_detector, areas_concs) {

my.lm = lm(Concentration_mM ~ Area, areas_concs);
Intercept = my.lm$coefficients[1];
Slope = my.lm$coefficients[2];

lm.compound = data.frame(my_compound, Slope, Intercept, peak_start, peak_end, my_detector);

return(lm.compound);
}
```

Plot peaks from chromatogram data.

```{r plot chromatogram peaks}

# plot peaks

plot_peaks = function(chroms.peak.norm, my_compound, my_detector)
{

plot.peaks = ggplot(chroms.peak.norm, aes(x=Minutes, y=Intensity_norm, group=Sample, color=Sample)) +
  ggtitle(paste(my_compound, my_detector, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak_start, peak_end), ylim=c(min(chroms.peak.norm$Intensity_norm), max(chroms.peak.norm$Intensity_norm)))+
  theme_classic()+
  mytheme;

return(plot.peaks)
}

```

Plot linear model

```{r plot linear model}

plot_lm = function(areas_concs)
{
  
plot.lm = ggplot(areas_concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my_compound, my_detector, "linear model", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

return(plot.lm);

}
```

# Methods

Table of compound concentrations in standards

```{r standards metabolite concs}

# Define the standards that will be used to quantify compounds.

my.standards = standards %>%
  filter(grepl("STD", Sample)) %>%
  mutate(Concentration_mM = as.numeric(Concentration_mM)) %>%
  mutate(Concentration_mM = round(Concentration_mM, 2)) %>%
  select(Sample, Compound, Concentration_mM);

table.standards = kable(my.standards, caption = "Table 1: Metabolite concentrations in standards");
table.standards
```

Select LCD files of standards

```{r select standards files}

# get list of all .lcd files in input dir, add sample descriptions
files.lcd.all = list.files(path = lcd.input.dir, pattern = ".lcd");
files.lcd.df = data.frame(File = files.lcd.all);
files.lcd.df = left_join(samples, files.lcd.df, by = "File");

# select standards files from standards table (Table 1)
standards.vector = unique(my.standards$Sample);
standards.list = data.frame(Sample = standards.vector);
files.standards = left_join(standards.list, files.lcd.df, by = "Sample");

# make vector of files of interest
files.lcd = as.vector(files.standards$File);

```

Read chromatogram .txt files for each standard into a data.frame

```{r read chromatogram txt files}

# define chromatogram data.frame
chromatograms.all = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());

for (file in files.lcd)
{
    # define input file
    filebase = str_replace(file, pattern = "\\.lcd", replacement="\\.txt");
    input_file = paste(txt.input.dir, filebase, sep="/");

    # read input file
    chromatogram.sample = read.table(file=input_file, header=T);

    # add to data.frame
    chromatograms.all = rbind(chromatograms.all, chromatogram.sample);
      
}
    
```

Add sample name (same as in standards table) to chromatograms data frame.

```{r add descriptions to chromatograms data frame}

# divide into replicates 
chromatograms.all.desc = left_join(chromatograms.all, samples, by = "File");
chromatograms.all.desc = chromatograms.all.desc %>%
  dplyr::select(Minutes, Intensity, Detector, Sample, File);

# print out first lines of chromatograms.all data frame
chromatograms.header = head(chromatograms.all.desc, 5);

table.chromatograms = kable(chromatograms.header, caption = "Table: first lines of chromatograms data frame");
table.chromatograms

```

Define list of compounds and the detectors that measure them

```{r define compounds and detectors}

# list of compounds in standards
compound_list = unique(standards$Compound);

# declare df of compounds and detectors
compounds_detectors = data.frame(
    Compound = character(),
    Detector = character()
    );

# define detectors for each compound
for (Compound in compound_list)
{
  if (Compound %in% c("Formate", "Acetate", "Lactate", "Propionate", "Butyrate"))
  {
      Detector = c("RID-10A", "SPD-20A 210nm");
      compound_target = data.frame(Compound, Detector);
  }
  if (Compound %in% c("Ethanol", "Propanol", "Butanol"))
  {
      Detector = c("RID-10A");
      compound_target = data.frame(Compound, Detector);
  }
  if (Compound == "Acetone")
  {
      Detector = c("RID-10A", "SPD-20A 260nm");
      compound_target = data.frame(Compound, Detector);
  }
  if (Compound == "Glucose")
  {
      Detector = c("RID-10A");
      compound_target = data.frame(Compound, Detector);
  }  
  compounds_detectors = rbind(compounds_detectors, compound_target);
}
    
```

Add start and end of peaks for each compound with each detector.

```{r define peak positions}

# define df of compounds and detectors
peaks = data.frame(
    Compound = character(),
    Start = numeric(),
    End = numeric()
    );

# Formate
Compound = "Formate";
Detector = "RID-10A";
Start = 16.5;
End = 17.5;
temp1 = data.frame (Compound, Detector, Start, End);

Compound = "Formate";
Detector = "SPD-20A 210nm";
Start = 16.25;
End = 17.25;
temp2 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, temp2, peaks);

# Acetate
Compound = "Acetate";
Detector = "RID-10A";
Start = 17.9;
End = 18.9;
temp1 = data.frame (Compound, Detector, Start, End);

Compound = "Acetate";
Detector = "SPD-20A 210nm";
Start = 17.7;
End = 18.7;
temp2 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, temp2, peaks);

# Propionate
Compound = "Propionate";
Detector = "RID-10A";
Start = 21;
End = 22;
temp1 = data.frame (Compound, Detector, Start, End);

Compound = "Propionate";
Detector = "SPD-20A 210nm";
Start = 21;
End = 22;
temp2 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, temp2, peaks);

# Lactate
Compound = "Lactate";
Detector = "RID-10A";
Start = 15.1;
End = 16;
temp1 = data.frame (Compound, Detector, Start, End);

Compound = "Lactate";
Detector = "SPD-20A 210nm";
Start = 14.9;
End = 15.7;
temp2 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, temp2, peaks);

# Ethanol
Compound = "Ethanol";
Detector = "RID-10A";
Start = 26.4;
End = 27.4;
temp1 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, peaks);

# Propanol
Compound = "Propanol";
Detector = "RID-10A";
Start = 33;
End = 34;
temp1 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, peaks);

# Butanol
Compound = "Butanol";
Detector = "RID-10A";
Start = 45;
End = 46;
temp1 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, peaks);

# Glucose
Compound = "Glucose";
Detector = "RID-10A";
Start = 10.8;
End = 11.5;
temp1 = data.frame (Compound, Detector, Start, End);
peaks = rbind(temp1, peaks);

compounds_peaks = left_join(compounds_detectors, peaks, by=c("Compound", "Detector"));

table.compounds = kable(compounds_peaks, caption = "Table: Compounds to quantify by HPLC");
table.compounds

```

Calculate:

1.  peak area
2.  linear model: slope, intercept

Plot:

1.  Peaks
2.  linear model

```{r calc peaks, lm}

chroms_all = chromatograms.all.desc;

# define df of compounds and lm data
compounds_lm = data.frame(
    Compound = character(),
    Detector = character(),
    Slope = numeric(),
    Intercept = numeric(),
    Peak_start = numeric(),
    Peak_end = numeric()
    );

# run through each compound and detector to quantify
rows = seq(1, nrow(compounds_peaks));

for (row in rows)  # foreach compound and detector
{
    my_compound = compounds_peaks$Compound[row];
    my_detector = compounds_peaks$Detector[row];
    peak_start = compounds_peaks$Start[row];
    peak_end = compounds_peaks$End[row];
    
    # grab chromatogram corresponding to peak
    if (peak_method == "mode")
    {
        chroms.peak.norm = norm_mode(chroms_all, my_detector, peak_start, peak_end);
    }
    if (peak_method == "boundaries")
    {
        chroms.peak.norm = norm_boundaries(chroms_all, my_detector, peak_start, peak_end);
    }

    # calculate peak areas
    areas_concs = calc_areas(chroms.peak.norm, my_compound, my_detector);

    # calc the linear model
    lm.compound = calc_linearModel(my_compound, peak_start, peak_end, my_detector, areas_concs);
    lm.compound = lm.compound %>%
        rename(Compound = my_compound, Detector = my_detector) %>%
        select(Compound, Detector, Slope, Intercept);
    my_slope = lm.compound$Slope;
    my_intercept = lm.compound$Slope;

    # add lm data to df
    target_lm = data.frame(Compound = my_compound, Detector = my_detector, Slope = my_slope, Intercept = my_intercept, Peak_start = peak_start, Peak_end = peak_end);
    compounds_lm = rbind(compounds_lm, target_lm);
   
    # plot peaks
    plot.peaks = plot_peaks(chroms.peak.norm, my_compound, my_detector);   

    # plot linear model
    plot.lm = plot_lm(areas_concs);

     # output plots
    description.sample = paste(my_compound, my_detector, sep = " ");  
    plots.all = grid.arrange(plot.peaks, plot.lm, ncol=2, top = description.sample);   
}
    

```

## Output linear model parameters

```{r print out LM parameters}

table_lm = kable(compounds_lm, caption = "Table: linear model parameters for each metabolite.", row.names = F);
table_lm

write.table(compounds_lm, file = table.out, row.names=FALSE, sep="\t")

```

# Conclusions