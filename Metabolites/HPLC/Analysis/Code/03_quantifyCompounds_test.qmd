---
title: "HPLC: quantify compounds using linear model from standards"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
execute:
  engine: /home/tolonen/.conda/envs/fermlab2/bin/R
---

# Introduction

This notebook quantifies the abundances of compounds in HPLC samples using the linear models calculated from the dilution series of standards. I

-   Inputs

    1.  Chromconverter-extracted txts files for each sample.
    2.  Table of linear models to quantify each compound

-   Outputs

    1.  Table: Sample name, Compound , Peak area, Compound concentration (mM), Sample description
    2.  Output graphs: plots of the peaks of each compound in each sample.

# Setup

Libraries

```{r Setup, message=FALSE}

rm(list = ls());

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);

# standards libraries
library(stringr);
library(tidyverse);
library(readr);
library(gridExtra);
library(modeest);
library(readxl);
library(DescTools); # AUC method

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
                axis.title.x = element_text(size = 8), 
                axis.title.y = element_text(size = 8),
                strip.text.x = element_text(size = 6),
                legend.position = "bottom", 
                aspect.ratio =0.5,
                plot.title = element_text(size = 8),
               );

```

Flags

```{r Flags}

# select peak method
peak.method = "boundaries";

```

File IO

```{r file IO}

# input: sample information file
info.file = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/information_HPLC_DATE.xlsx";
sample.info.in = read_excel(info.file, sheet = "Samples", skip = 2, col_names = TRUE);

# input: linear model computed using standards
regressions.file = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/Analysis/standards_linear-model.tsv";

# input: directory of chromatogram .txt files
txt.input.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/ChromConverter";

# output: plots of peaks in each sample
plots.out = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/Chromatograms/Compound_Peaks";

if (!dir.exists(plots.out)) 
{
  dir.create(plots.out);
}

# output: table of compound concentrations in each sample
table.out = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Analysis/Data/Analysis/compound_concentrations.tsv";

```

# Functions

## Background-normalize chromatograms

Method 1: normalize using mode intensity

```{r normalize chromatograms using mode intensity}

norm_mode = function(chroms.data, peak.start, peak.end)
{
  
# calc background-normalized intensity for each file 
chrom.peak.norm = chroms.data %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    mutate(Intensity_norm  = Intensity - Background) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

return(chrom.peak.norm);
}

```

Method 2: normalize using peak boundaries

```{r normalize chromatograms using peak boundaries}

# calculate base intensity as the mean of the two boundaries. 

norm_boundaries = function(chroms.data, peak.start, peak.end)
{

# calc background-normalized intensity for each file 
chrom.peak.norm = chroms.data %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
    mutate(Intensity_first = dplyr::first(Intensity)) %>%
    mutate(Intensity_last= dplyr::last(Intensity)) %>%
    mutate(Intensity_base = (Intensity_first + Intensity_last)/2) %>%
    mutate(Intensity_norm = Intensity - Intensity_base) %>%
  ungroup();

return(chrom.peak.norm);
}

```

## Calc peak areas

```{r calculate peak areas}

# input = chromatogram and locations of peak
# output = list: chromatogram peak and area

calcArea = function(chrom.sample, my.detector, peak.start, peak.stop) 
{
  # select detector
  chrom.sample.det = chrom.sample %>%
    filter(Detector == my.detector);
  
  # background-normalize the peak
   if (peak.method == "mode")
   {
     chrom.peak.norm = norm_mode(chrom.sample.det, peak.start, peak.stop);
   }
   if (peak.method == "boundaries")
   {
     chrom.peak.norm = norm_boundaries(chrom.sample.det, peak.start, peak.stop);
   }
  
  # calc peak area
  area.compound = AUC(
    chrom.peak.norm$Minutes, chrom.peak.norm$Intensity_norm, method='trapezoid');
  
  area.list = list(chrom.peak.norm, area.compound);
 
   return(area.list);
}

```

## Plot compound peak

```{r plot peak}

# input: compound name, 

plotPeak = function(my.compound, my.detector, chrom.peak) 
{

 plot.compound = ggplot(chrom.peak, aes(x=Minutes, y=Intensity)) +
  ggtitle(paste(my.compound, my.detector, sep=" "))+
  geom_point(size=0.5, color='blue') +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(ylim=c(min(chrom.peak$Intensity), max(chrom.peak$Intensity)))+
  theme_classic()+
  mytheme;

return(plot.compound);
}


```

# Methods

Load linear model data for standards

```{r standards regressions}

regressions.in = readr::read_tsv(regressions.file)

table.standards = kable(regressions.in, caption = "Table: linear model parameters for each metabolite");
table.standards
```

## Read chromatograms

Get chromatograms from Chromconverter txt files

```{r read chromatograms}

# Get list of chromconverter files to read
files.chrom = list.files(path = txt.input.dir, pattern = ".txt");

files.chrom.df = data.frame(files.chrom);
files.chrom.df = files.chrom.df %>%
  filter(!grepl("STD", files.chrom)) %>%
  filter(!grepl("Blank", files.chrom));

files.chrom = dplyr::pull(files.chrom.df, files.chrom);

# declare a data.fram for this sample
chrom.all = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      Sample = character(), 
                      Detector = character());

# read files
for (file in files.chrom)
{
  inputfile = paste(txt.input.dir, file, sep = "/");
  inputfile.base = str_replace(string=file, pattern=".txt", replacement = "");
  chrom.sample = read.csv(inputfile, header = TRUE, sep = "\t");
  chrom.all = rbind(chrom.all, chrom.sample);
}


```

Add sample descriptions from info file to chromatograms.

```{r add sample info to chromatograms data.frame}

sample.info = sample.info.in %>%
    mutate(Description = Sample) %>%
    mutate(Sample = str_replace(string = File, pattern = ".lcd", replacement = "")) %>%
#  unite("Description", -c("File", "Sample"), sep = " ", remove=T) %>%
    mutate(Description = str_replace_all(string=Description, pattern="NA", replacement="")) %>%
  select(Sample, File, Description);

chrom.all = left_join(chrom.all, sample.info, by = "File");

# print header of output
chrom.all.table = head(chrom.all, 5);
chrom.table = kable(chrom.all.table, caption = "Table: list of all chromatograms");
chrom.table  

```

## Quantify compounds

Declare output table

```{r declare output table}

# declare output table for compound quantifications.

quants.all = data.frame(
    Sample = character(),
    Compound = character(),
    Detector = character(),
    Area = double(),
    Concentration_mM = double(),
    Description = character());

```

Based on a previous run of the code, I am selecting revising the position of the peaks to best quantify the compounds.

```{r modify LM data, eval=F}

regressions.in = regressions.in %>%
  mutate(Peak_start = if_else((Compound == "Formate" & Detector == "SPD-20A 210nm"), true=16.4, false = Peak_start)) %>%
  mutate(Peak_start = if_else((Compound == "Formate" & Detector == "RID-10A"), true=16.6, false = Peak_start));


```

Plot peaks and calc concentrations

```{r calc peak areas and concs, fig.show = 'hide'}

# get list of samples to analyze
chrom.all = chrom.all %>%
    mutate(Filebase = str_replace(string=File, pattern="\\.lcd", replacement=""));

sample.list = unique(chrom.all$Filebase);

for (my.sample in sample.list) # for each sample
{
  # declare list for plots
  plots.list = list();  # new empty list
   
  # get chromatograms for sample of interest
  chrom.sample = chrom.all %>%
    filter(Filebase == my.sample);
  
  # foreach compound and detector 
  counter = 1;
  for(counter in 1:nrow(regressions.in)) 
  {
    row = regressions.in[counter,];
  
    my.compound = row$Compound;
    my.detector = row$Detector;
    peak.start = row$Peak_start;
    peak.stop = row$Peak_end;
    my.slope = row$Slope;
    my.intercept = row$Intercept;
    
    # calculate peak area 
    area.list = calcArea(chrom.sample, my.detector, peak.start, peak.stop);
    chrom.peak = area.list[[1]];
    area.compound = area.list[[2]];
  
    # calculate concentration
    conc.compound = my.slope * area.compound + my.intercept;

    # plot peak
    plot.compound = plotPeak(my.compound, my.detector, chrom.peak); 
    
  # data for output table
    quants.compound = data.frame(
      Sample = unique(chrom.sample$Sample), 
      Compound = my.compound, 
      Detector = my.detector, 
      Area = area.compound, 
      Concentration = conc.compound, 
      Description = unique(chrom.sample$Description));
    
    quants.all = rbind(quants.all, quants.compound);
    
    plots.list[[counter]] = plot.compound;
    counter = counter + 1;
  }
  
# print out plots for sample of interest
description.sample = unique(chrom.sample$Description);  
plots.all = grid.arrange(grobs = plots.list, top = description.sample);
output.path = paste(plots.out, "/", my.sample, ".png", sep = "");
ggsave(filename = output.path, plot = plots.all); # out plots for each compound
}
  
```

Print compound concentrations to table.

```{r print output table}

write.table(quants.all, file = table.out, row.names=FALSE, sep="\t")

```

# Conclusions