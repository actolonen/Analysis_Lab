---
title: "HPLC: compute linear model to quantify compounds in standard solution (STD1+STD2)"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Setup

```{r setup, echo=FALSE, message=FALSE}

rm(list = ls());

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

# standard libraries
library(tidyverse);
library(stringr);
library(readr);
library(gridExtra);
library(readxl);

# specific libraries
library(modeest); # calc mode
library(chromConverter); # convert .lcd to .txt
library(DescTools); # AUC method

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
                axis.title.x = element_text(size = 8), 
                axis.title.y = element_text(size = 8),
                strip.text.x = element_text(size = 6),
                legend.position = "bottom", 
                aspect.ratio =0.5,
                plot.title = element_text(size = 8),
               );

```

# Introduction

This notebook quantifies the peak areas of compounds using a dilution series of standards (see Table below). The peak areas of the compounds at different concentrations are used to compute a linear model correlating peak area and compound concentration (mM). The output is a file containing parameters of the linear model (slope, intercept) that can be applied to calculate compound concentrations in the experimental samples.

The chromatograms are extracted from the .lcd files using chromConverter. These HPLC files include data from 3 channels: RID, UV 210 nm, and UV 260 nm. Thus, linear models are calculated for all metabolites in STD1 and STD2 using the RID detector, the acids (formate, acetate) using the UV 210 nm detector, and acetone using the UV 260 detector.

# File IO

Files used by this script.

```{r file IO}

# input: sample information file
info.file = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/information_HPLC.xlsx";

standards = read_excel(info.file, sheet = "Standards", col_names = TRUE, skip = 0);
samples = read_excel(info.file, sheet = "Samples", col_names = TRUE, skip = 0);

# input: directory of .lcd files
lcd.input.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/LCD_LabSolutions";

# output: directory of .txt files
txt.output.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/ChromConverter";

if (!dir.exists(txt.output.dir)) 
{
  dir.create(txt.output.dir);
}

# output: file of linear model
table.out = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/standards_regressions_STD1-2.tsv";

```

Metabolite concentrations in standards samples.

```{r metabolite concs}

# focus on STD1+2 standards
standards = standards %>%
  filter(grepl("STD12", Sample)) %>%
  filter(grepl("_water", Sample)) %>%
  mutate(Sample = str_replace(string=Sample, pattern="_water", replacement="")) %>%
  mutate(Concentration_mM = round(mM, 2)) %>%
  select(Sample, Compound, Concentration_mM);

table.standards = kable(standards, caption = "Table 1: Metabolite concentrations in STD1+STD2 standards");
table.standards

```

# Functions

## Calc peak areas

Calculate peak areas for a metabolite.

```{r calculate peak areas for copound of interest}

# input = data.frame chroms.peak = Minutes, Intensity, Sample, File
# output = data.frame areas.all = Area, Concentration_mM, Sample, File

calc_areas = function(chroms.peak, my.compound)
{

# calc background-normalized intensity for each file 
# calc peak area for each file
chroms.peak.norm = chroms.peak %>%
  group_by(File) %>%
    mutate(Intensity_diff = Intensity - Background) %>%
    mutate(Area = AUC(Minutes, Intensity_diff, method = 'trapezoid')) %>%
  ungroup();

# format data frame
areas.all = chroms.peak.norm %>%
  select(Area, Sample, File) %>%
  distinct();

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my.compound);

areas.concs = left_join(areas.all, standards.compound, by="Sample");

areas.concs = areas.concs %>%
  mutate(Concentration_mM = as.numeric(Concentration_mM));

return(areas.concs);
}

```

## Calc linear model

```{r calculate linear model}

# input = areas.concs = data.frame: Concentration_mM, peak area

calc_linearModel = function(my.compound, peak.start, peak.end, my.detector, areas.concs) {

my.lm = lm(Concentration_mM ~ Area, areas.concs);
yint = my.lm$coefficients[1];
my.slope = my.lm$coefficients[2];

lm.compound = data.frame(my.compound, my.slope, yint, peak.start, peak.end, my.detector);

return(lm.compound);
}
```

# Methods

## Convert .lcd files to .txt files

Select .lcd files of interest (STD1+STD2)

```{r select STD1+2 .lcd files for conversion}

# get list of all .lcd files in onput dir
files.lcd.all = list.files(path = lcd.input.dir, pattern = ".lcd");
files.lcd.df = data.frame(File = files.lcd.all);
files.lcd.df = left_join(files.lcd.df, samples, by = "File");

# select STD1+2 files
files.lcd.df = files.lcd.df %>%
  filter(grepl("STD12", Sample)) %>%
  filter(grepl("_water", Sample)) %>%
  select(File, Sample);

# make vector of files of interest
files.lcd = as.vector(files.lcd.df$File);

```

chromConverter to read .lcd files and .txt files.

```{r chromConverter: convert .lcd files to .txt files}

# declare empty data.frame for all samples
chromatograms.all = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());

for (file in files.lcd) 
{
  inputfile = paste(lcd.input.dir, file, sep = "/");
  inputfile.base = str_replace(string=file, pattern=".lcd", replacement = "");

# declare a data.fram for this sample
chromatograms.sample = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());
  
  data = read_shimadzu_lcd(
     path = inputfile, 
     format_out = "data.frame", 
     data_format = "long", 
     read_metadata = TRUE);
  
for (detector in data) # foreach detector (data.frame) in the data list
  {
    my.instrument = attr(detector, which = "instrument");
    my.detector = attr(detector, which = "detector");
    my.wavelength = attr(detector, which = "wavelength");
    my.detector = if_else(my.detector == "SPD-20A", true = paste(my.detector, my.wavelength, sep = " "), false = my.detector); 
    
    detector = detector %>%
      rownames_to_column(var = "Minutes") %>%
      rename(Intensity = int) %>%
      mutate(File = file) %>%
      mutate(Detector = my.detector);
      chromatograms.sample = rbind(chromatograms.sample, detector); 
  }

chromatograms.all = rbind(chromatograms.all, chromatograms.sample);

# print out chromatogram from this sample to file
chromatogram.file = paste(inputfile.base, ".txt", sep="");
chromatogram.out = paste(txt.output.dir, chromatogram.file, sep="/");
write.table(chromatograms.sample, file = chromatogram.out, row.names=FALSE, sep="\t", col.names=TRUE); 
}


```

Add sample name (same as in standards table) to chromatograms data frame.

```{r add descriptions to chromatograms data frame}

chromatograms.all.desc = chromatograms.all %>%
  mutate(Minutes = as.numeric(Minutes));

chromatograms.all.desc = left_join(chromatograms.all.desc, samples, by = "File");
chromatograms.all.desc = chromatograms.all.desc %>%
  dplyr::select(Minutes, Intensity, Detector, Sample, File) %>%
  mutate(Sample = str_replace(string=Sample, pattern="_water", replacement=""));

# print out first lines of chromatograms.all data frame
chromatograms.header = head(chromatograms.all.desc, 5);

table.chromatograms = kable(chromatograms.header, caption = "Table: first lines of chromatograms data frame");
table.chromatograms

```

## Compound concentrations

Parse chromatograms by detector

```{r parse detectors}

data.rid = chromatograms.all.desc %>%
  filter(Detector == "RID-10A");

data.uv210 = chromatograms.all.desc %>%
  filter(Detector == "SPD-20A 210nm");

data.uv260 = chromatograms.all.desc %>%
  filter(Detector == "SPD-20A 260nm");

```

```{r declare output table}

# declare output table with regression information to calculate concentrations from peak
# areas in experimental samples.

# compound_mM = Slope.reg * peak.area + Intercept.reg;

lm.out = data.frame(
    Compound = character(),
    Slope.reg = double(),
    Intercept.reg = double(),
    peak.start = double(),
    peak.end = double(), 
    Detector = character()
);

```

### Acetate: RID

Calc peak areas and linear model

```{r acetate RID: calc peaks, lm}

# compound parameters
my.compound = "Acetate";
peak.start = 17.7;
peak.end = 18.9;
my.detector = "RID-10A";
my.data = data.rid;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r acetate RID: plot peaks, fig.cap = "Peak areas of acetate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
 

```

Plot linear model

```{r acetate RID LM: plot linear regression, fig.cap = "Linear regressions of peak area vs acetate concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

plot.lm

```

### Acetate: UV 210

Calc peak areas

```{r acetate UV210: calc peak areas, lm}

# compound parameters
my.compound = "Acetate";
peak.start = 17.7;
peak.end = 18.6;
my.detector = "SPD-20A 210nm";
my.data = data.uv210;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r acetate UV210: plot peaks, fig.cap = "Peak areas of acetate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
```

Plot linear model

```{r acetate UV210 LM: plot linear regression, fig.cap = "Linear regressions of peak area vs acetate concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);
```

### Ethanol: RID

Calc peak areas

```{r ethanol: calc peak areas}

# compound parameters
my.compound = "Ethanol";
peak.start = 26.3;
peak.end = 27.7;
my.detector = "RID-10A";
my.data = data.rid;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r ethanol: plot peaks, fig.cap = "Peak areas of ethanol in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
 
```

Plot linear model

```{r ethanol: plot linear model, fig.cap = "Linear regressions of peak area vs ethanol concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);


```

### Lactate: RID

Calc peak areas, lm

```{r lactate RID: calc peak areas, lm}

# compound parameters
my.compound = "Lactate";
peak.start = 15.1;
peak.end = 16.1;
my.detector = "RID-10A";
my.data = data.rid;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);


```

Plot peaks

```{r lactate RID: plot peaks, fig.cap = "Peak areas of lactate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
 

```

Plot linear model

```{r lactate LM RID: plot linear regression, fig.cap = "Linear regressions of peak area vs lactate concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);

```

### Lactate: UV 210

Calc peak areas, linear model

```{r lactate UV210: calc peak areas, lm}

# compound parameters
my.compound = "Lactate";
peak.start = 14.9;
peak.end = 15.8;
my.detector = "SPD-20A 210nm";
my.data = data.uv210;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r lactate UV2120: plot peaks, fig.cap = "Peak areas of lactate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
```

Plot linear model

```{r lactate LM UV210: plot linear regression, fig.cap = "Linear regressions of peak area vs lactate concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);

```

### Formate: RID

Calc peak areas, lm

```{r formate RID: calc peak areas, lm}

# compound parameters
my.compound = "Formate";
peak.start = 16.4;
peak.end = 17.4;
my.detector = "RID-10A";
my.data = data.rid;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r formate RID: plot peaks, fig.cap = "Peak areas of formate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
 
```

Plot linear model

```{r formate LM RID: plot linear regression, fig.cap = "Linear regressions of peak area vs formate concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);

```

### Formate: UV210

Calc peaks, lm

```{r formate uv210: calc peak areas, lm}

# compound parameters
my.compound = "Formate";
peak.start = 16.2;
peak.end = 17.3;
my.detector = "SPD-20A 210nm";
my.data = data.uv210;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r formate UV210: plot peaks, fig.cap = "Peak areas of formate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
```

Plot linear model

```{r formate LM UV210: plot linear regression, fig.cap = "Linear regressions of peak area vs formate concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);

```

### Glucose: RID

Calc peak areas

```{r glucose: calc peak areas}

# compound parameters
my.compound = "Glucose";
peak.start = 10.7;
peak.end = 11.7;
my.detector = "RID-10A";
my.data = data.rid;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r glucose: plot peaks, fig.cap = "Peak areas of glucose in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
 

 

```

Plot regressions

```{r glucose: plot linear regression, fig.cap = "Linear regressions of peak area vs glucose concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);


```

### Butyrate: UV 210

Get peaks, LM

```{r butyrate UV210: calc peaks, lm}

# compound parameters
my.compound = "Butyrate";
peak.start = 24.5;
peak.end = 26.5;
Detector = "SPD-20A 210nm";
my.data = data.uv210;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r butyrate UV210: plot peaks, fig.cap = "Peak areas of butyrate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
```

Plot linear model

```{r butyrate UV210 LM: plot linear regression, fig.cap = "Linear regressions of peak area vs butyrate concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

plot.lm
```

### Butanol: RID

Get peaks, LM

```{r butanol RID: calc peak areas, lm}

# compound parameters
my.compound = "Butanol";
peak.start = 43.8;
peak.end = 46;
Detector = "RID-10A";
my.data = data.rid;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r butanol RID: plot peaks, fig.cap = "Peak areas of butanol in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks

```

Plot LM

```{r butanol RID LM: plot linear regression, fig.cap = "Linear regressions of peak area vs butanol concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);
```

### Acetone: UV 260

Get peaks, LM

```{r acetone UV 260: calc peak areas}

# compound parameters
my.compound = "Acetone";
peak.start = 25.5;
peak.end = 27;
Detector = "SPD-20A 260nm";
my.data = data.uv260;

# get background (mode) for each file
# get chromatograms for peak of interest
chroms.peak = my.data %>%
  group_by(File) %>%
    mutate(Background = min(DescTools::Mode(round(Intensity, 1)))) %>%
    filter(Minutes > peak.start & Minutes < peak.end) %>%
  ungroup();

# calculate area for peak of interest
# areas.concs = data.frame areas.all = Area, Concentration_mM, Sample, File
areas.concs = calc_areas(chroms.peak, my.compound);

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, my.detector, areas.concs);
lm.out = rbind(lm.out, lm.compound);
```

Plot peaks

```{r acetone: plot peaks, fig.cap = "Peak areas of acetone in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(chroms.peak, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(chroms.peak$Intensity), max(chroms.peak$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
 
```

Plot LM

```{r acetone: plot linear model, fig.cap = "Linear regressions of peak area vs acetone concentration for all standards."}

plot.lm = ggplot(areas.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, my.detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.lm, ncol = 1);

```

## Output regression parameters

```{r print out regression parameters}

# rename cols for output
lm.out = lm.out %>%
  rename(Compound = my.compound, Slope = my.slope, Y.Intercept = yint, Peak.start = peak.start, Peak.end = peak.end);

table.regression = kable(lm.out, caption = "Table: regression parameters for each metabolite.", row.names = F);
table.regression

write.table(lm.out, file = table.out, row.names=FALSE, sep="\t")

```

# Conclusions
