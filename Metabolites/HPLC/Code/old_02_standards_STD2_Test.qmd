---
title: "HPLC: compute linear model to quantify compounds in standard solution STD2"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Setup

```{r setup, echo=FALSE, message=FALSE}

rm(list = ls());

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

library(chromConverter);
library(stringr);
library(tidyverse);
library(readr);
library(gridExtra);
library(modeest);
library(readxl);
library(DescTools); # AUC method

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
                axis.title.x = element_text(size = 8), 
                axis.title.y = element_text(size = 8),
                strip.text.x = element_text(size = 6),
                legend.position = "bottom", 
                aspect.ratio =0.5,
                plot.title = element_text(size = 8),
               );
```

# Introduction

This notebook quantifies the peak areas of compounds using a dilution series of standards (see Table below). The peak areas of the compounds at different concentrations are used to compute a linear model correlating peak area and compound concentration (mM). The output is a file containing parameters of the linear model (slope, intercept) that can be applied to calculate compound concentrations in the experimental samples.

The chromatograms are extracted from the .lcd files using chromConverter. These HPLC files include data from 3 channels: RID, UV 210 nm, and UV 260 nm. Thus, linear models are calculated for all metabolites as follows:

-   Butanol: RID

-   Butyrate: UV 210 nm

-   Acetone; UV 260 nm

# File IO

Files used by this script.

```{r file IO}

# input: sample information file
info.file = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/information_HPLC.xlsx";

standards = read_excel(info.file, sheet = "Standards", col_names = TRUE, skip = 0);
samples = read_excel(info.file, sheet = "Samples", col_names = TRUE, skip = 0);

# input: directory of .lcd files
lcd.input.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/LCD_LabSolutions";

# output: directory of .txt files
txt.output.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/ChromConverter";

if (!dir.exists(txt.output.dir)) 
{
  dir.create(txt.output.dir);
}

# output: file of linear model
table.out = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/standards_regressions_STD2.tsv";

```

Metabolite concentrations in standards samples.

```{r metabolite concs}

# focus on STD2 standards
standards = standards %>%
  filter(grepl("STD2_", Sample)) %>%
  mutate(Concentration_mM = round(mM, 2)) %>%
  select(Sample, Compound, Concentration_mM);

table.standards = kable(standards, caption = "Table 1: Metabolite concentrations in STD2 standards");
table.standards

```

# Functions

## Calc peak areas

Calculate peak areas for a metabolite. Returns list: chromatogram peaks for all samples, peak areas for all samples.

```{r calculate peak areas for copound of interest}

# INPUT
# my.data = data.frame: Minutes, Intensity, Detector, Sample (as in table 1), File 

# OUTPUT 
#  peaks.all = data.frame: minutes, intensity, file 
# areas.all = data.frame: peak area, Sample (as in table 1), Compound, Concentration_mM

calc_peakAreas = function(my.compound, peak.start, peak.end, my.data) 
{
#  get list of samples
file.list = unique(my.data$File);

# declare dataframe for peaks with unique file ID for each curve (for plotting)
peaks.all = data.frame(Minutes = double(),
                       Intensity = double(),
                       Sample = character(),
                       File = character());

# declare data frame for peak areas, inludes sample (same as Table 1) to add concs
areas.all = data.frame(Sample = character(),
                       Area = double(), 
                       File = character());

for (SampleID in file.list) # foreach standards sample
{
  
# calc background as mode measurement
data.temp = my.data %>%
  filter(File == SampleID);
background = modeest::mfv(round(data.temp$Intensity, digits = 1));
  
 # get chromatogram for peak
 data.peak = my.data %>%
   filter(File == SampleID) %>%
   filter(Minutes > peak.start & Minutes < peak.end) %>%
   select(Minutes, Intensity, Sample, File);

 peaks.all = rbind(peaks.all, data.peak);
 
 # calc peak areas
 data.temp = data.peak %>%
   mutate(Intensity_diff = Intensity - background);
 my.area = AUC(data.temp$Minutes, data.temp$Intensity_diff, method='trapezoid');
 my.sample = unique(data.temp$Sample);
 my.file = SampleID;
 area.sample = data.frame(my.sample, my.area, my.file);
 area.sample = rename(area.sample, Sample = my.sample, Area = my.area, File = my.file);
 areas.all = rbind(areas.all, area.sample);
}

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my.compound);

areas.all.concs = left_join(areas.all, standards.compound, by="Sample");

areas.all.concs = areas.all.concs %>%
  mutate(Concentration_mM = as.numeric(Concentration_mM));

# return data as a list
peakData = list(peaks.all, areas.all.concs);
return(peakData);
}

```

## Calc linear model

```{r calculate linear model}

# input = areas.all.concs = data.frame: Concentration_mM, peak area

calc_linearModel = function(my.compound, peak.start, peak.end, Detector, areas.all.concs) {

my.lm = lm(Concentration_mM ~ Area, areas.all.concs);
yint = my.lm$coefficients[1];
my.slope = my.lm$coefficients[2];

my.regression = data.frame(my.compound, my.slope, yint, peak.start, peak.end, Detector);

return(my.regression);
}
```

# Methods

## Convert .lcd files to .txt files

Select .lcd files of interest (STD1)

```{r select STD1 files}

# get list of all .lcd files in onput dir
files.lcd.all = list.files(path = lcd.input.dir, pattern = ".lcd");
files.lcd.df = data.frame(File = files.lcd.all);
files.lcd.df = left_join(files.lcd.df, samples, by = "File");

# select STD2 files
files.lcd.df = files.lcd.df %>%
  filter(grepl("STD2_", Sample)) %>%
  select(File, Sample);

# make vector of files of interest
files.lcd = as.vector(files.lcd.df$File);

```

chromConverter to read .lcd files and .txt files.

```{r chromConverter: convert .lcd files to .txt files}

# declare empty data.frame for all samples
chromatograms.all = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());

for (file in files.lcd) 
{
  inputfile = paste(lcd.input.dir, file, sep = "/");
  inputfile.base = str_replace(string=file, pattern=".lcd", replacement = "");

# declare a data.fram for this sample
chromatograms.sample = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());
  
  data = read_shimadzu_lcd(
     path = inputfile, 
     format_out = "data.frame", 
     data_format = "long", 
     read_metadata = TRUE);
  
for (detector in data) # foreach detector (data.frame) in the data list
  {
    my.instrument = attr(detector, which = "instrument");
    my.detector = attr(detector, which = "detector");
    my.wavelength = attr(detector, which = "wavelength");
    my.detector = if_else(my.detector == "SPD-20A", true = paste(my.detector, my.wavelength, sep = " "), false = my.detector); 
    detector = detector %>%
      rownames_to_column(var = "Minutes") %>%
      rename(Intensity = int) %>%
      mutate(File = file) %>%
      mutate(Detector = my.detector);
      chromatograms.sample = rbind(chromatograms.sample, detector); 
  }

chromatograms.all = rbind(chromatograms.all, chromatograms.sample);

# print out chromatogram from this sample to file
chromatogram.file = paste(inputfile.base, ".txt", sep="");
chromatogram.out = paste(txt.output.dir, chromatogram.file, sep="/");
write.table(chromatograms.sample, file = chromatogram.out, row.names=FALSE, sep="\t", col.names=TRUE); 
}


```

Add sample name (same as in standards table) to chromatograms data frame.

```{r add descriptions to chromatograms data frame}

chromatograms.all.desc = chromatograms.all %>%
  mutate(Minutes = as.numeric(Minutes));

# divide into replicates 
chromatograms.all.desc = left_join(chromatograms.all.desc, samples, by = "File");
chromatograms.all.desc = chromatograms.all.desc %>%
  dplyr::select(Minutes, Intensity, Detector, Sample, File);

# print out first lines of chromatograms.all data frame
chromatograms.header = head(chromatograms.all.desc, 5);

table.chromatograms = kable(chromatograms.header, caption = "Table: first lines of chromatograms data frame");
table.chromatograms

```

## Compound concentrations

Parse chromatograms by detector

```{r parse detectors}

data.rid = chromatograms.all.desc %>%
  filter(Detector == "RID-10A");

data.uv210 = chromatograms.all.desc %>%
  filter(Detector == "SPD-20A 210nm");

data.uv260 = chromatograms.all.desc %>%
  filter(Detector == "SPD-20A 260nm");

```

```{r declare output table}

# declare output table with regression information to calculate concentrations from peak
# areas in experimental samples.

# compound_mM = Slope.reg * peak.area + Intercept.reg;

lm.out = data.frame(
    Compound = character(),
    Slope.reg = double(),
    Intercept.reg = double(),
    peak.start = double(),
    peak.end = double(), 
    Detector = character()
);

```

### Butyrate: UV 210

Calc peak areas

```{r Butyrate UV210: calc peak areas, lm}

# compound parameters
my.compound = "Butyrate";
peak.start = 24.5;
peak.end = 26.5;
Detector = "SPD-20A 210nm";
my.data = data.uv210;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r butyrate UV210: plot peaks, fig.cap = "Peak areas of butyrate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  scale_x_continuous(breaks=seq(peak.start, peak.end, 0.5))+
  theme_classic()+
  mytheme;

myplot
```

Plot linear model

```{r butyrate UV210 LM: plot linear regression, fig.cap = "Linear regressions of peak area vs butyrate concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);
```

### Butanol: RID

Calc peak areas

```{r ethanol: calc peak areas}

# compound parameters
my.compound = "Butanol";
peak.start = 43.8;
peak.end = 46;
Detector = "RID-10A";
my.data = data.rid;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);


```

Plot peaks

```{r ethanol: plot peaks, fig.cap = "Peak areas of ethanol in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 
```

Plot linear model

```{r ethanol: plot linear model, fig.cap = "Linear regressions of peak area vs ethanol concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);


```

### Acetone: UV 260

Calc peak areas, lm

```{r acetone UV 260: calc peak areas, lm}

# compound parameters
my.compound = "Acetone";
peak.start = 25.5;
peak.end = 27;
Detector = "SPD-20A 260nm";
my.data = data.uv260;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);


```

Plot peaks

```{r acetone UV260: plot peaks, fig.cap = "Peak areas of lactate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=Sample, color=Sample)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 

```

Plot linear model

```{r acetone LM UV260: plot linear regression, fig.cap = "Linear regressions of peak area vs acetone concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);

```

## Output regression parameters

```{r print out regression parameters}

# rename cols for output
lm.out = lm.out %>%
  rename(Compound = my.compound, Slope = my.slope, Y.Intercept = yint, Peak.start = peak.start, Peak.end = peak.end);

table.regression = kable(lm.out, caption = "Table: regression parameters for each metabolite.", row.names = F);
table.regression

write.table(lm.out, file = table.out, row.names=FALSE, sep="\t")

```

# Conclusions
