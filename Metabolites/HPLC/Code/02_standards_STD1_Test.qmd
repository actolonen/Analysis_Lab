---
title: "HPLC: compute linear model to quantify compounds in standard solutions"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Setup

```{r setup, echo=FALSE, message=FALSE}

rm(list = ls());

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

library(chromConverter);
library(stringr);
library(tidyverse);
library(readr);
library(gridExtra);
library(modeest);
library(readxl);
library(DescTools); # AUC method

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
                axis.title.x = element_text(size = 8), 
                axis.title.y = element_text(size = 8),
                strip.text.x = element_text(size = 6),
                legend.position = "bottom", 
                aspect.ratio =0.5,
                plot.title = element_text(size = 8),
               );
```

# Introduction

This notebook quantifies the peak areas of compounds using a dilution series of standards (see Table below). The peak areas of the compounds at different concentrations are used to compute a linear model correlating peak area and compound concentration (mM). The output is a file containing parameters of the linear model (slope, intercept) that can be applied to calculate compound concentrations in the experimental samples.

The chromatograms are extracted from the .lcd files using chromConverter. These HPLC files include data from 3 channels: RID, UV 210 nm, and UV 260 nm. All fermentation products can be detected by RID, wheras only the acids can be detected by UV 210. Thus, linear models are calculated for all metabolites using RID and just the acids for UV 210 nm.

# File IO

Files used by this script.

```{r file IO}

# input: sample information file
info.file = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/information_HPLC_Test.xlsx";

standards = read_excel(info.file, sheet = "Standards", col_names = TRUE, skip = 2);

# input: directory of .lcd files
lcd.input.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/LCD_LabSolutions";

# output: directory of .txt files
txt.output.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/ChromConverter";

if (!dir.exists(txt.output.dir)) 
{
  dir.create(txt.output.dir);
}

# output: file of linear model
table.out = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/standards_regressions_STD1.tsv";

```

Metabolite concentrations in standards samples.

```{r metabolite concs}

table.standards = kable(standards, caption = "Table: Metabolite concentrations in STD1 standards");
table.standards

```

# Functions

## Calc peak areas

Calculate peak areas for a metabolite. Returns list: chromatogram peaks for all samples, peak areas for all samples.

```{r calculate peak areas}

calc_peakAreas = function(my.compound, peak.start, peak.end, my.data) 
{
#  get list of samples
file.list = unique(my.data$File);

# declare dataframes for peaks and areas
peaks.all = data.frame(Minutes = double(),
                           Intensity = double(),
                           File = character(),
                           Detector = character());

areas.all = data.frame(File = character(),
                       Area = double(), 
                       Detector = character());

for (SampleID in file.list) # foreach standards sample
{
  
# calc background as mode measurement
data.temp = my.data %>%
  filter(File == SampleID);
background.cc = modeest::mfv(round(data.temp$Intensity, digits = 1));
  
 # get chromatogram for peak
 data.peak = my.data %>%
   filter(File == SampleID) %>%
   filter(Minutes > peak.start & Minutes < peak.end);
   # separate(Sample, c("Sample", "Replicate"), sep = "-");

 peaks.all = rbind(peaks.all, data.peak);
 
 # calc peak areas: cc and ls
 data.temp = data.peak %>%
   mutate(Intensity_diff = Intensity - background.cc);
 my.area =AUC(data.temp$Minutes, data.temp$Intensity_diff, method='trapezoid');
 Detector = unique(data.temp$Detector);
 File = SampleID;
 area.sample = data.frame(File, my.area, Detector);
 areas.all = rbind(areas.all, area.sample);

}

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my.compound);

areas.all.concs = left_join(areas.all, standards.compound, by="File");

areas.all.concs = areas.all.concs %>%
  rename(Area = my.area) %>%
  mutate(Concentration_mM = as.numeric(Concentration_mM));

# return data as a list
peakData = list(peaks.all, areas.all.concs);
return(peakData);
}

```

## Calc linear model

```{r calculate linear model}

calc_linearModel = function(my.compound, peak.start, peak.end, Detector, areas.all.concs) {

my.lm = lm(Concentration_mM ~ Area, areas.all.concs);
yint = my.lm$coefficients[1];
my.slope = my.lm$coefficients[2];

my.regression = data.frame(my.compound, my.slope, yint, peak.start, peak.end, Detector);

return(my.regression);
}
```

# Methods

## Convert .lcd files to .txt files

chromConverter to read .lcd files and .txt files.

```{r chromConverter: convert .lcd files to .txt files}

# select sample files for analysis. Ignore 'blanks' files
files.lcd = list.files(path = lcd.input.dir, pattern = ".lcd");

files.lcd.df = data.frame(files.lcd);
files.lcd.df = files.lcd.df %>%
  filter(grepl("STD1_", files.lcd));
files.lcd = dplyr::pull(files.lcd.df, files.lcd);

# declare empty data.frame for all samples
chromatograms.all = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());

for (file in files.lcd) 
{
  inputfile = paste(lcd.input.dir, file, sep = "/");
  inputfile.base = str_replace(string=file, pattern=".lcd", replacement = "");

# declare a data.fram for this sample
chromatograms.sample = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());
  
  data = read_shimadzu_lcd(
     path = inputfile, 
     format_out = "data.frame", 
     data_format = "long", 
     read_metadata = TRUE);
  
for (detector in data) # foreach detector (data.frame) in the data list
  {
    my.instrument = attr(detector, which = "instrument");
    my.detector = attr(detector, which = "detector");
    my.wavelength = attr(detector, which = "wavelength");
    my.detector = if_else(my.detector == "SPD-20A", true = paste(my.detector, my.wavelength, sep = " "), false = my.detector); 
    detector = detector %>%
      rownames_to_column(var = "Minutes") %>%
      rename(Intensity = int) %>%
      mutate(File = file) %>%
      mutate(Detector = my.detector);
      chromatograms.sample = rbind(chromatograms.sample, detector); 
  }

chromatograms.all = rbind(chromatograms.all, chromatograms.sample);

# print out chromatogram from this sample to file
chromatogram.file = paste(inputfile.base, ".txt", sep="");
chromatogram.out = paste(txt.output.dir, chromatogram.file, sep="/");
write.table(chromatograms.sample, file = chromatogram.out, row.names=FALSE, sep="\t", col.names=TRUE); 
}

chromatograms.all = chromatograms.all %>%
  mutate(Minutes = as.numeric(Minutes));

```

## Compound concentrations

Parse chromatograms by detector

```{r parse detectors}

data.rid = chromatograms.all %>%
  filter(Detector == "RID-10A");

data.uv210 = chromatograms.all %>%
  filter(Detector == "SPD-20A 210nm");

data.uv260 = chromatograms.all %>%
  filter(Detector == "SPD-20A 260nm");

```

```{r declare output table}

# declare output table with regression information to calculate concentrations from peak
# areas in experimental samples.

# compound_mM = Slope.reg * peak.area + Intercept.reg;

lm.out = data.frame(
    Compound = character(),
    Slope.reg = double(),
    Intercept.reg = double(),
    peak.start = double(),
    peak.end = double(), 
    Detector = character()
);

```

### Acetate: RID

Calc peak areas and linear model

```{r acetate RID: calc peaks, lm}

# compound parameters
my.compound = "Acetate";
peak.start = 17.9;
peak.end = 19;
Detector = "RID-10A";
my.data = data.rid;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r acetate RID: plot peaks, fig.cap = "Peak areas of acetate in each of the standards samples."}

# plot peaks
 plot.peaks = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

plot.peaks
 

```

Plot linear model

```{r acetate RID LM: plot linear regression, fig.cap = "Linear regressions of peak area vs acetate concentration for all standards."}

plot.lm = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

plot.lm

```

### Acetate: UV 210

Calc peak areas

```{r acetate UV210: calc peak areas, lm}

# compound parameters
my.compound = "Acetate";
peak.start = 17.7;
peak.end = 18.8;
Detector = "SPD-20A 210nm";
my.data = data.uv210;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r acetate UV210: plot peaks, fig.cap = "Peak areas of acetate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
```

Plot linear model

```{r acetate UV210 LM: plot linear regression, fig.cap = "Linear regressions of peak area vs acetate concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);
```

### Ethanol: RID

Calc peak areas

```{r ethanol: calc peak areas}

# compound parameters
my.compound = "Ethanol";
peak.start = 26.1;
peak.end = 27.7;
Detector = "RID-10A";
my.data = data.rid;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);


```

Plot peaks

```{r ethanol: plot peaks, fig.cap = "Peak areas of ethanol in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 
```

Plot linear model

```{r ethanol: plot linear model, fig.cap = "Linear regressions of peak area vs ethanol concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);


```

### Lactate: RID

Calc peak areas, lm

```{r lactate RID: calc peak areas, lm}

# compound parameters
my.compound = "Lactate";
peak.start = 15.1;
peak.end = 16.1;
Detector = "RID-10A";
my.data = data.rid;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);


```

Plot peaks

```{r lactate RID: plot peaks, fig.cap = "Peak areas of lactate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 

```

Plot linear model

```{r lactate LM RID: plot linear regression, fig.cap = "Linear regressions of peak area vs lactate concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);

```

### Lactate: UV 210

Calc peak areas, linear model

```{r lactate UV210: calc peak areas, lm}

# compound parameters
my.compound = "Lactate";
peak.start = 14.9;
peak.end = 15.9;
Detector = "SPD-20A 210nm";
my.data = data.uv210;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r lactate UV2120: plot peaks, fig.cap = "Peak areas of lactate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
```

Plot linear model

```{r lactate LM UV210: plot linear regression, fig.cap = "Linear regressions of peak area vs lactate concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);

```

### Formate: RID

Calc peak areas, lm

```{r formate RID: calc peak areas, lm}

# compound parameters
my.compound = "Formate";
peak.start = 16.5;
peak.end = 17.5;
Detector = "RID-10A";
my.data = data.rid;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r formate RID: plot peaks, fig.cap = "Peak areas of formate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 
```

Plot linear model

```{r formate LM RID: plot linear regression, fig.cap = "Linear regressions of peak area vs formate concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);

```

### Formate: UV210

Calc peaks, lm

```{r formate uv210: calc peak areas, lm}

# compound parameters
my.compound = "Formate";
peak.start = 16.2;
peak.end = 17.3;
Detector = "SPD-20A 210nm";
my.data = data.uv210;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r formate UV210: plot peaks, fig.cap = "Peak areas of formate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
```

Plot linear model

```{r formate LM UV210: plot linear regression, fig.cap = "Linear regressions of peak area vs formate concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);

```

### Glucose: RID

Calc peak areas

```{r glucose: calc peak areas}

# compound parameters
my.compound = "Glucose";
peak.start = 10.7;
peak.end = 11.7;
Detector = "RID-10A";
my.data = data.rid;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(my.compound, peak.start, peak.end, my.data);
peaks.all = peakData[[1]];  # chromatograms of peaks
areas.all.concs = peakData[[2]]; # peak areas at each conc

# calc the linear model
lm.compound = calc_linearModel(my.compound, peak.start, peak.end, Detector, areas.all.concs);
lm.out = rbind(lm.out, lm.compound);

```

Plot peaks

```{r glucose: plot peaks, fig.cap = "Peak areas of glucose in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 

 

```

Plot regressions

```{r glucose: plot linear regression, fig.cap = "Linear regressions of peak area vs glucose concentration for all standards."}

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=Concentration_mM))+
  ggtitle(paste(my.compound, Detector, "(chromConverter)", sep = " "))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);


```

## Output regression parameters

```{r print out regression parameters}

# rename cols for output
lm.out = lm.out %>%
  rename(Compound = my.compound, Slope = my.slope, Y.Intercept = yint, Peak.start = peak.start, Peak.end = peak.end);

table.regression = kable(lm.out, caption = "Table: regression parameters for each metabolite.", row.names = F);
table.regression

write.table(lm.out, file = table.out, row.names=FALSE, sep="\t")

```

# Conclusions
