---
title: "HPLC: compute linear model to quantify compounds in standard solutions"
author: "Fermlab"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Setup

```{r setup, echo=FALSE, message=FALSE}

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

library(chromConverter);
library(stringr);
library(tidyverse);
library(readr);
library(gridExtra);
library(modeest);
library(readxl);
library(DescTools); # AUC method

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
                axis.title.x = element_text(size = 8), 
                axis.title.y = element_text(size = 8),
                strip.text.x = element_text(size = 6),
                legend.position = "bottom", 
                aspect.ratio =0.5,
                plot.title = element_text(size = 8),
               );
```

# Introduction

This notebook quantifies the peak areas of compounds using a dilution series of standards (see Table below). The peak areas of the compounds at different concentrations are used to compute a linear model correlating peak area and compound concentration (mM). The output is a file containing parameters of the linear model (slope, intercept) that can be applied to calculate compound concentrations in the experimental samples.

The chromatograms are extracted from the .lcd files using chromConverter. While the HPLC files include data from 3 channels (below), we will focus only on the data from detector B (RID) for these analyses.

# File IO

Files used by this script.

```{r file IO}

# input: sample information file
info.file = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/information_HPLC_Test.xlsx";

# input: directory of .lcd files
lcd.input.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/LCD_LabSolutions";

# output: directory of .txt files
txt.output.dir = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/ChromConverter";

if (!dir.exists(txt.output.dir)) 
{
  dir.create(txt.output.dir);
}

# output: file of linear model
table.out = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Metabolites/HPLC/Data/standards_regressions.tsv";

```

Metabolite concentrations in standards samples.

```{r metabolite concs}

standards = read_excel(info.file, sheet = "Standards", col_names = TRUE, skip = 2);

table.standards = kable(standards, caption = "Table: Metabolite concentrations in standards");
table.standards

```

# Functions

## Calc peak areas

Calculate peak areas for a metabolite. Returns list: chromatogram peaks for all samples, peak areas for all samples.

```{r calculate peak areas}

calc_peakAreas = function(peak.start, peak.end, data.all) 
{
#  get list of samples
file.list = unique(data.all$File);

# declare dataframes for peaks and areas
peaks.all = data.frame(Minutes = double(),
                           Intensity = double(),
                           File = character(),
                           Detector = character());

areas.all = data.frame(File = character(),
                       Area = double(), 
                       Detector = character());

for (SampleID in file.list) # foreach standards sample
{
  
# calc background as mode measurement
data.temp = data.all %>%
  filter(File == SampleID);
background.cc = modeest::mfv(round(data.temp$Intensity, digits = 1));
  
 # get chromatogram for peak
 data.peak = data.all %>%
   filter(File == SampleID) %>%
   filter(Minutes > peak.start & Minutes < peak.end);
   # separate(Sample, c("Sample", "Replicate"), sep = "-");

 peaks.all = rbind(peaks.all, data.peak);
 
 # calc peak areas: cc and ls
 data.temp = data.peak %>%
   mutate(Intensity_diff = Intensity - background.cc);
 my.area =AUC(data.temp$Minutes, data.temp$Intensity_diff, method='trapezoid');
 Detector = unique(data.temp$Detector);
 File = SampleID;
 area.sample = data.frame(File, my.area, Detector);
 areas.all = rbind(areas.all, area.sample);

}
# return data as a list
peakData = list(peaks.all, areas.all);
return(peakData);
}

```

# Methods

## Convert .lcd files to .txt files

chromConverter to read .lcd files and .txt files.

```{r chromConverter: convert .lcd files to .txt files}

# select sample files for analysis. Ignore 'blanks' files
files.lcd = list.files(path = lcd.input.dir, pattern = ".lcd");

files.lcd.df = data.frame(files.lcd);
files.lcd.df = files.lcd.df %>%
  filter(grepl("STD", files.lcd));
files.lcd = dplyr::pull(files.lcd.df, files.lcd);

# declare empty data.frame for all samples
chromatograms.all = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());

for (file in files.lcd) 
{
  inputfile = paste(lcd.input.dir, file, sep = "/");
  inputfile.base = str_replace(string=file, pattern=".lcd", replacement = "");

# declare a data.fram for this sample
chromatograms.sample = data.frame(
                      Minutes = double(),
                      Intensity = double(),
                      File = character(), 
                      Detector = character());
  
  data = read_shimadzu_lcd(
     path = inputfile, 
     format_out = "data.frame", 
     data_format = "long", 
     read_metadata = TRUE);
  
for (detector in data) # foreach detector (data.frame) in the data list
  {
    my.instrument = attr(detector, which = "instrument");
    my.detector = attr(detector, which = "detector");
    my.wavelength = attr(detector, which = "wavelength");
    my.detector = if_else(my.detector == "SPD-20A", true = paste(my.detector, my.wavelength, sep = " "), false = my.detector); 
    detector = detector %>%
      rownames_to_column(var = "Minutes") %>%
      rename(Intensity = int) %>%
      mutate(File = file) %>%
      mutate(Detector = my.detector);
      chromatograms.sample = rbind(chromatograms.sample, detector); 
  }

chromatograms.all = rbind(chromatograms.all, chromatograms.sample);

# print out chromatogram from this sample to file
chromatogram.file = paste(inputfile.base, ".txt", sep="");
chromatogram.out = paste(txt.output.dir, chromatogram.file, sep="/");
write.table(chromatograms.sample, file = chromatogram.out, row.names=FALSE, sep="\t", col.names=TRUE); 
}

chromatograms.all = chromatograms.all %>%
  mutate(Minutes = as.numeric(Minutes));

```

Focus just on detector B for quantifications.

```{r filter detector B}

data.all = chromatograms.all %>%
  filter(Detector == "RID-10A");

```

## Compound concentrations

```{r declare output table}

# declare output table with regression information to calculate concentrations from peak
# areas in experimental samples.

# compound_mM = Slope.reg * peak.area + Intercept.reg;

regressions.out = data.frame(
    Compound = character(),
    Slope.reg = double(),
    Intercept.reg = double(),
    peak.start = double(),
    peak.end = double()
);

```

### Acetate

Calc peak areas

```{r acetate: calc peak areas}

# compound parameters
my.compound = "Acetate";
peak.start = 17.7;
peak.end = 18.7;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(peak.start, peak.end, data.all);
peaks.all = peakData[[1]]; 
areas.all = peakData[[2]];

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my.compound);

areas.all.concs = left_join(areas.all, standards.compound, by="File");

areas.all.concs = areas.all.concs %>%
  rename(Area = my.area);

```

Calc regressions

```{r acetate: regressions}

my.lm = lm(mM ~ Area, areas.all.concs);
yint = my.lm$coefficients[1];
my.slope = my.lm$coefficients[2];
my.slope.text = formatC(my.slope, format = "e", digits = 2);

regression.cc = data.frame(my.compound, my.slope, yint, peak.start, peak.end);
regressions.out = rbind(regressions.out, regression.cc);
regtext.cc = paste("mM product = ", my.slope.text, "* Area + ", round(yint, 3), sep="");


```

Plot peaks

```{r acetate: plot peaks, fig.cap = "Peak areas of acetate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 

```

Plot regressions

```{r acetate: plot linear regression, fig.cap = "Linear regressions of peak area vs acetate concentration for all standards."}

# text placement
text.x = 2e3;
text.y = 5;

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=mM))+
  ggtitle(paste(my.compound, " (chromConverter)"))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  geom_text(x=text.x, y=text.y, label=regtext.cc, size=2)+
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);


```

### Ethanol

Calc peak areas

```{r ethanol: calc peak areas}

# compound parameters
my.compound = "Ethanol";
peak.start = 25.75;
peak.end = 27.25;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(peak.start, peak.end, data.all);
peaks.all = peakData[[1]];
areas.all = peakData[[2]];

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my.compound);

areas.all.concs = left_join(areas.all, standards.compound, by="File");

areas.all.concs = areas.all.concs %>%
  rename(Area = my.area);

```

Calc regressions

```{r ethanol: regressions}

my.lm = lm(mM ~ Area, areas.all.concs);
yint = my.lm$coefficients[1];
my.slope = my.lm$coefficients[2];
my.slope.text = formatC(my.slope, format = "e", digits = 2);

regression.cc = data.frame(my.compound, my.slope, yint, peak.start, peak.end);
regressions.out = rbind(regressions.out, regression.cc);
regtext.cc = paste("mM product = ", my.slope.text, "* Area + ", round(yint, 3), sep="");

```

Plot peaks

```{r ethanol: plot peaks, fig.cap = "Peak areas of ethanol in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 
 

```

Plot regressions

```{r ethanol: plot linear regression, fig.cap = "Linear regressions of peak area vs ethanol concentration for all standards."}

# text placement
text.x = 10e3;
text.y = 50;

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=mM))+
  ggtitle(paste(my.compound, " (chromConverter)"))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  geom_text(x=text.x, y=text.y, label=regtext.cc, size=2)+
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);


```

### Lactate

Calc peak areas

```{r lactate: calc peak areas}

# compound parameters
my.compound = "Lactate";
peak.start = 14.8;
peak.end = 15.8;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(peak.start, peak.end, data.all);
peaks.all = peakData[[1]];
areas.all = peakData[[2]];

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my.compound);

areas.all.concs = left_join(areas.all, standards.compound, by="File");

areas.all.concs = areas.all.concs %>%
  rename(Area = my.area);


```

Calc regressions

```{r lactate: regressions}

my.lm = lm(mM ~ Area, areas.all.concs);
yint = my.lm$coefficients[1];
my.slope = my.lm$coefficients[2];
my.slope.text = formatC(my.slope, format = "e", digits = 2);

regression.cc = data.frame(my.compound, my.slope, yint, peak.start, peak.end);
regressions.out = rbind(regressions.out, regression.cc);
regtext.cc = paste("mM product = ", my.slope.text, "* Area + ", round(yint, 3), sep="");



```

Plot peaks

```{r lactate: plot peaks, fig.cap = "Peak areas of lactate in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 

```

Plot regressions

```{r lactate: plot linear regression, fig.cap = "Linear regressions of peak area vs lactate concentration for all standards."}

# text placement
text.x = 10e3;
text.y = 50;

# text placement
text.x = 2e3;
text.y = 5;

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=mM))+
  ggtitle(paste(my.compound, " (chromConverter)"))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  geom_text(x=text.x, y=text.y, label=regtext.cc, size=2)+
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);


```

### Glucose

Calc peak areas

```{r glucose: calc peak areas}

# compound parameters
my.compound = "Glucose";
peak.start = 10.65;
peak.end = 11.3;

# get the chromatogram peaks and calculate the areas for each sample
peakData = calc_peakAreas(peak.start, peak.end, data.all);
peaks.all = peakData[[1]];
areas.all = peakData[[2]];

# add standard concentrations to peak areas
standards.compound = standards %>%
  filter(Compound == my.compound);

areas.all.concs = left_join(areas.all, standards.compound, by="File");

areas.all.concs = areas.all.concs %>%
  rename(Area = my.area);

```

Calc regressions

```{r glucose: regressions}

my.lm = lm(mM ~ Area, areas.all.concs);
yint = my.lm$coefficients[1];
my.slope = my.lm$coefficients[2];
my.slope.text = formatC(my.slope, format = "e", digits = 2);

regression.cc = data.frame(my.compound, my.slope, yint, peak.start, peak.end);
regressions.out = rbind(regressions.out, regression.cc);
regtext.cc = paste("mM product = ", my.slope.text, "* Area + ", round(yint, 3), sep="");


```

Plot peaks

```{r glucose: plot peaks, fig.cap = "Peak areas of glucose in each of the standards samples."}

# plot peaks
 myplot = ggplot(peaks.all, aes(x=Minutes, y=Intensity, group=File, color=File)) +
  ggtitle(paste(my.compound, " peaks", sep=""))+
  geom_point(size=0.5) +
  xlab("Time") +
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(peaks.all$Intensity), max(peaks.all$Intensity)))+
  theme_classic()+
  mytheme;

myplot
 

 

```

Plot regressions

```{r glucose: plot linear regression, fig.cap = "Linear regressions of peak area vs glucose concentration for all standards."}

# text placement
text.x = 10e3;
text.y = 5;

plot.reg.cc = ggplot(areas.all.concs, aes(x=Area, y=mM))+
  ggtitle(paste(my.compound," (chromConverter)"))+
  geom_point(size=2, color = 'blue') +
  geom_smooth(method=lm, se=FALSE, color='red', width=0.1, formula = y ~ x)+
  xlab("Area") + 
  ylab("mM") +
  theme_classic() +
  geom_text(x=text.x, y=text.y, label=regtext.cc, size=2)+
  mytheme;

# print regressions
 bothplots = grid.arrange(plot.reg.cc, ncol = 1);


```

## Output regression parameters

```{r print out regression parameters}

# rename cols for output
regressions.out = regressions.out %>%
  rename(Compound = my.compound, Slope = my.slope, Y.Intercept = yint, Peak.start = peak.start, Peak.end = peak.end);

table.regression = kable(regressions.out, caption = "Table: regression parameters for each metabolite.");
table.regression

write.table(regressions.out, file = table.out, row.names=FALSE, sep="\t")

```

# Conclusions
