---
title: "HPLC: compare standards"
author: "Andrew Tolonen"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Introduction

The objective of this script is to compare the peak areas from HPLC standards using ChromConverter and Lab Solutions .txt files. The HPLC files include data from 3 channels (below). For these analyses, we will focus only on the data from detector B (RID).

1.  Detector A-Ch1: UV/VIS SPD-20A detector at 260 nm.
2.  Detector A-Ch2: UV/VIS SPD-20A detector at 210 nm. Acids (ie acetate) are visible using channel 2.
3.  Detector B: Refractive index RID-10A.

We will compare the chromatograms for 5 concentrations of metabolites (STD1-5):

1.  STD1
2.  STD2
3.  STD3
4.  STD4
5.  STD5

First, we will compare the chromatograms for Lab Solutions .txt files versus Chromconverter-converted .lcd files. We will then calculate peak areas for each file type and plot the linearity of the standard curves.

# Methods

## Setup

```{r r setup, echo=FALSE, message=FALSE}

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

library(chromConverter);
library(stringr);
library(tidyverse);
library(readr);
library(gridExtra);
library(modeest);
library(readxl);

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
               axis.title.x = element_text(size = 8), 
               axis.title.y = element_text(size = 8),
               strip.text.x = element_text(size = 6),
               legend.position = "bottom", 
               aspect.ratio =0.25);

```

## Metabolite concs in standards

```{r metabolite concs}

datafile = "/home/tolonen/GenoscopeDrive/Lab_Projects/BiomassFermentation/Biostat_HPLC/HPLC_2024.08/standards_mM.xlsx";
standards = read_excel(datafile, sheet = "Sheet1", col_names = TRUE);

# adapt to this dataset with duplicates
standards1 = standards %>%
  mutate(samplenum = "-1") %>%
  unite("Sample", Sample, samplenum, sep="");
standards2 = standards %>%
  mutate(samplenum = "-2") %>%
  unite("Sample", Sample, samplenum, sep="");
standards = rbind(standards1, standards2);

```

## LS: extract detector B

Perl to extract detector B chromatograms from Lab Solutions .txt files. Prints detector B .txt files

```{perl to extract detector B chromatograms, eval = F, engine.path = "/usr/bin/perl"}

# perl code to extract detector B chromatograms from LabSolutions .txt files. Outputs 
# detector B chromatograms as .txt files.

$dirpath = "/home/tolonen/GenoscopeDrive/Lab_Projects/BiomassFermentation/Biostat_HPLC/HPLC_2024.08/Lab_Solutions";

# get list of .txt files
opendir(DIR, $dirpath) or die "cannot open directory $dirpath\n";
@allfiles = grep(/STD.*\.txt$/, readdir(DIR));

# remove cleaned files from previous runs
foreach $file (@allfiles)
{
 if ($file =~ /detector/)
 {
  $inputfile = "$dirpath"."/"."$file";
  unlink($inputfile);
 }
}

# extract detector B (RID) chromatogram
LOOP:foreach $file (@allfiles)
{
 $inputfilepath = "$dirpath"."/"."$file";
 $file =~ /(.*).txt/;
 $inputfilebase = $1;
 $outputfile = "$inputfilebase"."_detectorB.txt";
 $outputfilepath = "$dirpath"."/DetectorB/"."$outputfile";
 open(IN, "<$inputfilepath") or die "cant open IN\n";
 open(OUT, ">$outputfilepath") or die "cant open OUT\n";
 while ($line = <IN>)
 {
  chomp($line);
  $line =~ s/\r//g;
  unless ($line =~ /LC Chromatogram\(Detector B-Ch1\)/)
  {
   next;
  }
  until ($line =~ /^R.Time/)
  {
    $line = <IN>;
    chomp($line);
    $line =~ s/\r//g;
  }
  print OUT "$line\n";
  $line = <IN>;
  until($line =~ /[a-z]/)
 {
  chomp($line);
  $line =~ s/\r//g;
  print OUT "$line\n";
  $line = <IN>;
 }
next LOOP;
}
close IN;
close OUT;
}

```

## CC: convert .lcd to .txt

ChromConverter to read .lcd files and output detector B .txt files.

```{r Chromconverter: convert .lcd file to .txt files}

# get a list of .lcd files in the working directory and convert them to data.frames, 
# then print the data.frmes as .txt files.

input.dir = "/home/tolonen/GenoscopeDrive/Lab_Projects/BiomassFermentation/Biostat_HPLC/HPLC_2024.08/Chromconverter";
files.lcd = list.files(path = input.dir, pattern = "STD");
output.dir = "/home/tolonen/GenoscopeDrive/Lab_Projects/BiomassFermentation/Biostat_HPLC/HPLC_2024.08/Chromconverter/Output/";

# declare empty data.frame
data_cc = data.frame(Minutes = double(),
                      Intensity = double(),
                      Sample = character());

for (file in files.lcd) 
{
  inputfile = paste(input.dir, file, sep = "/");
  inputfile.base = str_replace(string=file, pattern=".lcd", replacement = "");
  data = read_shimadzu_lcd(
     path = inputfile, 
     format_out = "data.frame", 
     data_format = "long", 
     read_metadata = TRUE);
  mydata = data; # make a personal copy
  mydata = mydata %>%
    rownames_to_column(var = "Minutes") %>%
    rename(Intensity = int) %>%
    mutate(Sample=inputfile.base); # add col of sample
  data_cc = rbind(data_cc, mydata); # make df of all samples
  outputfile = paste(output.dir, inputfile.base, "_chromConverter_RID-10A_Detector_B.txt", sep = "");
  write.csv(data_cc, file = outputfile);
}

```

# Results

Make data.frame of chromatograms produced by chromConverter() and LabSolutions

```{r Compare Chromatograms}

# foreach headerless .txt file in LabSolutions directory, grab file base name, open filehandles to LabSolutions and chromConverter files base file name, plot both files on same plot.

# directories of input files
input.dir.ls = "/home/tolonen/GenoscopeDrive/Lab_Projects/BiomassFermentation/Biostat_HPLC/HPLC_2024.08/Lab_Solutions/DetectorB";
input.dir.cc = "/home/tolonen/GenoscopeDrive/Lab_Projects/BiomassFermentation/Biostat_HPLC/HPLC_2024.08/Chromconverter/Output";

# read cc data into data frame
files.cc = list.files(path = input.dir.cc, pattern = "chromConverter_RID-10A_Detector_B.txt");

# declare empty data.frame
data.all= data.frame(Minutes = double(),
                     Intensity = double(),
                     Sample = character(), 
                     Format = character());

for (file in files.cc) 
{
  path.cc = paste(input.dir.cc, file, sep = "/");
  inputfile.cc.base = str_replace(string=file, pattern="_chromConverter_RID-10A_Detector_B.txt", replacement = "");
  data.cc = read.csv(file = path.cc, header=TRUE);

# cleanup input data
data.cc = data.cc %>%
  select(Minutes, Intensity, Sample) %>%
  mutate(Format = "ChromConverter");

data.all = rbind(data.all, data.cc);
}

# read ls data into data frame
files.ls = list.files(path = input.dir.ls, pattern = "detectorB.txt");

for (file in files.ls) 
{
  path.ls = paste(input.dir.ls, file, sep = "/");
  inputfile.ls.base = str_replace(string=file, pattern="_detectorB.txt", replacement="");
  data.ls = read.csv(file = path.ls, header=TRUE, sep = "\t");

# clean up data 
data.ls = data.ls %>%
  rename(Minutes = R.Time..min.) %>%
  mutate(Format = "LabSolutions") %>%
  mutate(Minutes = as.numeric(Minutes)) %>%
  mutate(Intensity = as.numeric(Intensity)) %>%
  mutate(Sample = inputfile.ls.base) %>%
  drop_na();

# data.ls = data.ls %>%
#   mutate(Intensity = (0.1 * Intensity));

# concatenate data from two files
data.all = rbind(data.all, data.ls);

}

```

## Table comparing max peak heights

```{r table comparing max peak heights}

sample.list = unique(data.all$Sample);

# declare empty data.frame
data.table.all = data.frame(Sample = character(),
                     Intensity_cc = double(),
                     Intensity_ls = double(),
                     Ratio = double());

for (mysample in sample.list)
{
  data.table = data.all %>%
    filter(Sample == mysample);
  
  data.cc.sample = data.table %>%
    filter(Format == "ChromConverter");
  max.cc = max(data.cc.sample$Intensity);

  data.ls.sample = data.table %>%
    filter(Format == "LabSolutions");
  max.ls = max(data.ls.sample$Intensity);
  
  ratio = max.ls/max.cc;

  data.table.sample = data.frame(mysample, max.cc, max.ls, ratio);
  
  data.table.all = rbind(data.table.all, data.table.sample);
}

table1 = kable(data.table.all, caption = "Table: Comparison of max peak heights for each sample analyzed using ChromConverter and LabSolutions. The mean ratio (chromConveter/LabSolutions) was applied to all subsequent ChromConverter analyses.");
table1

# transform cc intensities by mean ratio
ratio.mean = mean(data.table.all$ratio);
data.all = data.all %>%
  mutate(Intensity = case_when(Format == "ChromConverter" ~ Intensity * ratio.mean, Format == "LabSolutions" ~ Intensity));

```

## Plot chromatograms

```{r plot data foreach sample}

sample.list = unique(data.all$Sample);

for (mysample in sample.list)
{
 data.plot = data.all %>%
   filter(Sample == mysample);

 myplot = ggplot(data.plot, aes(x=Minutes, y=Intensity)) +
  ggtitle(mysample)+
  geom_point(size=0.5, color = 'blue') +
  xlab("Time") + 
  ylab("Intensity") +
  theme_classic() +
  facet_wrap(~ Format)+
  theme_classic()+
  mytheme;

 bothplots = grid.arrange(myplot, ncol = 1);
 bothplots
}
```

# Peak areas

Calculate the background as the most common chromatogram intensity (mode).

```{r calc background}

# calc background as mode measurement
data.temp = data.all %>%
  filter(Format == "LabSolutions");
background.ls = modeest::mfv(round(data.temp$Intensity, digits = 1));

data.temp = data.all %>%
  filter(Format == "ChromConverter");
background.cc = modeest::mfv(round(data.temp$Intensity, digits = 1));

```

## Acetate

Plot acetate peaks and calculate peak areas

```{r calc acetate peak areas}

# define peak range
peak.start = 17.75;
peak.end = 18.6;

sample.list = unique(data.all$Sample);

peaks.acetate = data.frame(SampleID = character(),
                       Area = double(),
                       Method = character());

for (SampleID in sample.list)
{
 data.peak = data.all %>%
   filter(Sample == SampleID) %>%
   filter(Minutes > peak.start & Minutes < peak.end);
 
 myplot = ggplot(data.peak, aes(x=Minutes, y=Intensity)) +
  ggtitle(SampleID)+
  geom_point(size=0.5, color = 'blue') +
  xlab("Time") + 
  ylab("Intensity") +
  coord_cartesian(xlim=c(peak.start, peak.end), ylim=c(min(data.peak$Intensity), max(data.peak$Intensity)))+
  theme_classic() +
  facet_wrap(~ Format)+
  theme_classic()+
  mytheme;

# print acetate chromatogram peaks
 bothplots = grid.arrange(myplot, ncol = 1);
 bothplots
 
 # calc peak areas: cc and ls
Method = "ChromConverter";
data.temp = data.peak %>%
  filter(Format == Method) %>%
  mutate(Intensity_diff = Intensity - background.cc);
Area = sum(data.temp$Intensity_diff);
peaks.sample = data.frame(SampleID, Area, Method);
peaks.acetate = rbind(peaks.acetate, peaks.sample);

Method = "LabSolutions";
data.temp = data.peak %>%
  filter(Format == Method) %>%
  mutate(Intensity_diff = Intensity - background.ls);
Area = sum(data.temp$Intensity_diff);
peaks.sample = data.frame(SampleID, Area, Method);
peaks.acetate = rbind(peaks.acetate, peaks.sample);
}


```

Plot regression of acetate conc vs peak area

```{r acetate peak areas}

# add acetate concs
standards.acetate = standards %>%
  filter(Metabolite == "Acetate") %>%
  rename(SampleID = Sample);

peaks.acetate.concs = left_join(peaks.acetate, standards.acetate, by="SampleID");

# plot lab solutions
plot.ls = peaks.acetate.concs %>%
  filter(Method == "LabSolutions")

# # calc linear regression
# lm.ls = lm(Area ~ mM, plot.ls);
# 
# # calc regression line
# yintercept = lm.ls$coefficients[1];
# myslope = lm.ls$coefficients[2];
# ycalc = myslope * lm.ls$mM + yintercept;
# df = cbind(df, ycalc);

plot.acetate.ls = ggplot(plot.ls, aes(x=mM, y=Area))+
  ggtitle("Acetate (LabSolutions)")+
  geom_point(size=0.5, color = 'blue') +
  xlab("Time") + 
  ylab("Intensity") +
  theme_classic() +
  theme_classic()+
  mytheme;

# plot cc
plot.cc = peaks.acetate.concs %>%
  filter(Method == "ChromConverter");
  
plot.acetate.cc = ggplot(plot.ls, aes(x=mM, y=Area))+
  ggtitle("Acetate (ChromConverter)")+
  geom_point(size=0.5, color = 'blue') +
  xlab("Time") + 
  ylab("Intensity") +
  theme_classic() +
  theme_classic()+
  mytheme;

# print acetate chromatogram peaks
 bothplots = grid.arrange(plot.acetate.ls, plot.acetate.cc, ncol = 2);
 bothplots

```

# Peak areas: ethanol

```{r}

```

# Conclusions
