# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
# # all correlation coeffs to data.
test.data = test.data %>%
mutate(Slopes = slopes.all) %>%
na.omit();
# cluster the slopes of the linear regression (1 = good and 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in df with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
theme_classic();
myplot
my.ylim = max(test.data$Product);
my.ylim
# The goal of this chuck is to select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
# # all correlation coeffs to data.
test.data = test.data %>%
mutate(Slopes = slopes.all) %>%
na.omit();
# cluster the slopes of the linear regression (1 = good and 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in df with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
my.ylim = max(test.data$Product);
my.xlim = max(test.data$Minutes);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
coord_cartesian(xlim=c(0,my.xlim), ylim = c(0, my.ylim))+
scale_x_continuous(breaks=seq(0, my.xlim, my.xlim/10))+
scale_y_continuous(breaks=seq(0, my.ylim, my.ylim/10))+
theme_classic();
myplot
test.data
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 1:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all) %>%
na.omit();
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
# calc max vals for axes
my.ylim = max(test.data$Product);
my.xlim = max(test.data$Minutes);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
coord_cartesian(xlim=c(0,my.xlim), ylim = c(0, my.ylim))+
scale_x_continuous(breaks=seq(0, my.xlim, my.xlim/10))+
scale_y_continuous(breaks=seq(0, my.ylim, my.ylim/10))+
theme_classic();
myplot
slopes.all
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all) %>%
na.omit();
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
# calc max vals for axes
my.ylim = max(test.data$Product);
my.xlim = max(test.data$Minutes);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
coord_cartesian(xlim=c(0,my.xlim), ylim = c(0, my.ylim))+
scale_x_continuous(breaks=seq(0, my.xlim, my.xlim/10))+
scale_y_continuous(breaks=seq(0, my.ylim, my.ylim/10))+
theme_classic();
myplot
slopes.all
knitr::opts_chunk$set(warning = F, message = F);
rm(list = ls());
library(tidyverse);
library(readxl);
library(knitr);
library(ggpubr);
library(ggtext);
library(gtable);
library(grid);
library(zoo); # library for analysis ordered indexed observations.
mytheme = theme(axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
axis.title.x = element_text(size = 4),
axis.title.y = element_text(size = 4),
strip.text.x = element_text(size = 4),
legend.position = "none",
aspect.ratio =1,
plot.caption=element_textbox_simple(padding = margin(10,0,10,0), hjust=0, size=10));
getSlope = function(d) # function to calc the slope of a linear regression
{
d = as.data.frame(d);
m = lm(Product ~ Minutes, d);
myslope = m$coefficient[2];
return(myslope);
}
# load reaction data
datafile = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Enzyme_Kinetics/reactionRate.xlsx";
input = read_excel(datafile, sheet = "Rate", col_names = TRUE, skip = 0);
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all) %>%
na.omit();
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
# calc max vals for axes
my.ylim = max(test.data$Product);
my.xlim = max(test.data$Minutes);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
coord_cartesian(xlim=c(0,my.xlim), ylim = c(0, my.ylim))+
scale_x_continuous(breaks=seq(0, my.xlim, my.xlim/10))+
scale_y_continuous(breaks=seq(0, my.ylim, my.ylim/10))+
theme_classic();
myplot
slopes.all
test.data
b.points
co.cl
co.cl$cluster
test.data
slopes.all
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
slopes.all[1] = slopes.all[2]; # add slope for first data point
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all) %>%
na.omit();
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
# calc max vals for axes
my.ylim = max(test.data$Product);
my.xlim = max(test.data$Minutes);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
coord_cartesian(xlim=c(0,my.xlim), ylim = c(0, my.ylim))+
scale_x_continuous(breaks=seq(0, my.xlim, my.xlim/10))+
scale_y_continuous(breaks=seq(0, my.ylim, my.ylim/10))+
theme_classic();
myplot
co.cl
co.cl$cluster
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
slopes.all[1] = slopes.all[2]; # add slope for first data point
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all);
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
# calc max vals for axes
my.ylim = max(test.data$Product);
my.xlim = max(test.data$Minutes);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
coord_cartesian(xlim=c(0,my.xlim), ylim = c(0, my.ylim))+
scale_x_continuous(breaks=seq(0, my.xlim, my.xlim/10))+
scale_y_continuous(breaks=seq(0, my.ylim, my.ylim/10))+
theme_classic();
myplot
knitr::opts_chunk$set(warning = F, message = F);
rm(list = ls());
library(tidyverse);
library(readxl);
library(knitr);
library(ggpubr);
library(ggtext);
library(gtable);
library(grid);
library(zoo); # library for analysis ordered indexed observations.
mytheme = theme(axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
axis.title.x = element_text(size = 4),
axis.title.y = element_text(size = 4),
strip.text.x = element_text(size = 4),
legend.position = "none",
aspect.ratio =1,
plot.caption=element_textbox_simple(padding = margin(10,0,10,0), hjust=0, size=10));
getSlope = function(d) # function to calc the slope of a linear regression
{
d = as.data.frame(d);
m = lm(Product ~ Minutes, d);
myslope = m$coefficient[2];
return(myslope);
}
# load reaction data
datafile = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Enzyme_Kinetics/reactionRate.xlsx";
input = read_excel(datafile, sheet = "Rate", col_names = TRUE, skip = 0);
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
slopes.all[1] = slopes.all[2]; # add slope for first data point
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all);
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
# calc max vals for axes
my.ylim = max(test.data$Product);
my.xlim = max(test.data$Minutes);
# plot data (red points) and regression line (black line)
myplot = ggplot(test.data, aes(x=Minutes, y=Product)) +
ggtitle("Data and linear regression line")+
geom_point(size=1, color = "red") +
xlab("Minutes") +
ylab("Product") +
geom_line(aes(x=Minutes, y=Product_calc))+
coord_cartesian(xlim=c(0,my.xlim), ylim = c(0, my.ylim))+
scale_x_continuous(breaks=seq(0, my.xlim, my.xlim/10))+
scale_y_continuous(breaks=seq(0, my.ylim, my.ylim/10))+
theme_classic();
myplot
test.data
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
slopes.all[1] = slopes.all[2]; # add slope for first data point
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all);
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
reaction.rate = myslope / enzyme_mg;
knitr::opts_chunk$set(warning = F, message = F);
rm(list = ls());
library(tidyverse);
library(readxl);
library(knitr);
library(ggpubr);
library(ggtext);
library(gtable);
library(grid);
library(zoo); # library for analysis ordered indexed observations.
mytheme = theme(axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
axis.title.x = element_text(size = 4),
axis.title.y = element_text(size = 4),
strip.text.x = element_text(size = 4),
legend.position = "none",
aspect.ratio =1,
plot.caption=element_textbox_simple(padding = margin(10,0,10,0), hjust=0, size=10));
getSlope = function(d) # function to calc the slope of a linear regression
{
d = as.data.frame(d);
m = lm(Product ~ Minutes, d);
myslope = m$coefficient[2];
return(myslope);
}
# load reaction data
datafile = "/home/tolonen/Github/actolonen/Public/Analysis_Lab/Enzyme_Kinetics/reactionRate.xlsx";
input = read_excel(datafile, sheet = "Rate", col_names = TRUE, skip = 0);
# enter enzyme concentration
enzyme_mg = 5;
# Goal: select the number of initial data points composing the initial, linear portion of the curve. This method assumes the curve is composed of two parts: the linear part and the non-linear part.
# 1. Calc the slopes of linear models of increasing numbers of data points
# 2. Cluster the slopes into two clusters by K-means
# 3. Select datapoints in cluster with high initial reaction rate.
mydata = input;
slopes.all = numeric(0); # delcare empty vector
# calculate the slope of the linear model for increasing numbers of points
for (x in 2:nrow(mydata))
{
test.data = head(mydata, x);
my.slope = getSlope(test.data);
slopes.all[x] = my.slope;
}
slopes.all[1] = slopes.all[2]; # add slope for first data point
# # add col of slopes to data.
test.data = test.data %>%
mutate(Slopes = slopes.all);
# cluster the slopes of the linear regression (cluster 1 = good and cluster 2 = bad)
co.cl = kmeans(test.data$Slopes, 2);
# b.points are points included in linear part of curve
b.points = which(co.cl$cluster == match(max(co.cl$centers), co.cl$centers));
# RES is positions of points in data with indices in b.points
RES = test.data[b.points,];
# calc lin regression for points in linear portion of curve
test = lm(Product ~ Minutes, RES);
# calc regression line
yintercept = test$coefficients[1];
myslope = test$coefficients[2];
Product_calc = myslope * test.data$Minutes + yintercept;
RES = cbind(test.data, Product_calc);
reaction.rate = myslope / enzyme_mg;
output = paste("Reaction rate in product per min per mg enzyme = ", reaction.rate, sep = "");
output
