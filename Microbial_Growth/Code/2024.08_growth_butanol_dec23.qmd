---
title: "01_2024.08_growth_butanol_dec23.qmd"
author: "Tom Zaplana, Andrew Tolonen"
format: html
editor: visual
toc: TRUE
code-fold: TRUE
embed-resources: TRUE
---

# Introduction

This notebook analyzes the Clario expt comparing growth of *C. phytofermentans* WT and PHY24.0.6 in GS2 with different concentrations of butanol.

# Methods

## Set up

```{r setup, echo=FALSE, message=FALSE}

# General setup code

library(knitr);
knitr::opts_chunk$set(warning = F, message = F);
knitr::opts_chunk$set(engine.path = list(perl = "/usr/bin/perl"));

library(tidyverse);
library(readxl);
library(readr);

mytheme = theme(axis.text.x = element_text(size = 6), 
                axis.text.y = element_text(size = 6), 
               axis.title.x = element_text(size = 8), 
               axis.title.y = element_text(size = 8),
               strip.text.x = element_text(size = 6),
               legend.position = "bottom", 
               aspect.ratio =1);
```

## File I/O

```{r File IO}

# input file
file.in = "01_Courbe_de_croissance_WT-GM3_butanol_clario_04_12_2023.xlsx";
path.in = "/home/tolonen/Github/actolonen/2_DirectedEvolution/Genemat/Projects_Genemat/Clostridia_Butanol/Cphy/Growth/PHY24.0.6/Data/";
data.in = paste(path.in, file.in, sep = "");

# output plot
plot.out = "01_Courbe_de_croissance_WT-GM3_butanol_clario_04_12_2023.png";
path.out = "/home/tolonen/Github/actolonen/2_DirectedEvolution/Genemat/Projects_Genemat/Clostridia_Butanol/Cphy/Growth/PHY24.0.6/Plots/"
data.out = paste(path.out, plot.out, sep = "");

```

## Define functions

```{r run_growthcurver}

# function to run Growthcurver analysis on each treatment group.

run_growthcurver = function(growth.treatment)
{
# select cols of interest
growth.fit = growth.treatment %>%
    select(time, OD600_mean);

# calc growth rate information
gc_fit = SummarizeGrowthByPlate(growth.fit, bg_correct = "none");

# components of SummarizeGrowthByPlate object
k_maxOD = gc_fit$k;  # carrying capacity
n0_minOD = gc_fit$n0; # initial OD600
r = gc_fit$r; # intrinsic growth rate
genTime = gc_fit$t_gen; # generation time
auc_areaCurve = gc_fit$auc_l; # AUC, integral of logistic eq
auc_areaTrapezoid = gc_fit$auc_e; # AUC, area of trapezoid
sigma_fit = gc_fit$sigma; # goodnesss of fit of the parameters of the logistic equation (residual standard error from the nonlinear regression model).
note = gc_fit$note; # note if poor fit

# make data.frame of fit data
Treatment = growth.treatment$Treatment[1];
fitdata = data.frame(Treatment, k_maxOD, n0_minOD, r, genTime, sigma_fit, note);
return(fitdata);
}
```

## Organize data for plotting

```{r Organize data for plots}

plate.map = read_excel(data.in, sheet = "Information", col_names = TRUE, skip = 3);
growth.data = read_excel(data.in, sheet = "Raw", col_names = TRUE, skip = 0);

# plate map variables
my.sep = "_"; # treatment separator
first.well = "A01";
last.well = "H12";

# parse plate.map
plate.map = plate.map %>%
  filter(!Treatment == "empty") %>%
  mutate(Treatment2 = Treatment) %>%
  separate(Treatment2, c("Strain", "Butanol"), sep = "_") %>%
  mutate(Butanol_Percent = str_match(Butanol, pattern="^[\\d\\.]+")); 
  
# parse growth.data
growth.data.long = growth.data %>%
  dplyr::select(-Well) %>%
  rename("Time" = "...2") %>%
  slice(-1) %>%
  slice(-1) %>%
  mutate(Time = if_else(grepl("min", Time), true = Time, false =  paste(Time, "0 min", sep = " "))) %>%  # add minutes field where lacking
  separate(Time, c("hours", "hours.label", "min", "min.label"), sep = " ") %>%
  mutate(Hours = as.numeric(hours) + as.numeric(min) / 60) %>%
  dplyr::select(Hours, first.well:last.well) %>%
  pivot_longer(cols = first.well:last.well, names_to = "Well", values_to = "OD600");
growth.data.long$OD600 = as.numeric(growth.data.long$OD600);

# remove contaminated wells
growth.data.long = growth.data.long %>%
  filter(!Well %in% c("A04", "A05", "A06", "C03", "E02", "G01", "G04", "G05"));

# add treatment info
growth.data.all = inner_join(growth.data.long, plate.map, by = "Well");

# # get mean blank measurement (min reading) for each treatment
# blanks.all = growth.data.all %>%
#   group_by(Treatment) %>%
#   mutate(Blank_mean = min(OD600)) %>%
#   select(Treatment, Blank_mean) %>%
#   distinct();
# 
# # subtract initial reading from OD measurements
# growth.data.all = left_join(growth.data.all, blanks.all, by = "Treatment");
# growth.data.all = growth.data.all %>%
#   mutate(OD600 = OD600 - Blank_mean) %>%
#   select(-Blank_mean);

# get mean blank measurements for all treatments
blanks.all = growth.data.all %>%
 filter(grepl("Blank", Treatment)) %>%
 group_by(Hours) %>%
  mutate(Blank_mean = mean(OD600)) %>%
  select(Hours, Blank_mean) %>%
  distinct();

# subtract initial reading from OD measurements
growth.data.all = left_join(growth.data.all, blanks.all, by = "Hours");
growth.data.all = growth.data.all %>%
  mutate(OD600 = OD600 - Blank_mean) %>%
  select(-Blank_mean);

# calculate means, sds 
growth.data.all = growth.data.all %>%
  group_by(Hours, Treatment) %>%
  mutate(OD600_mean = mean(OD600), OD600_sd = sd(OD600));

```

## Organize data for growth curver

```{r Organize data for growthcurver}

library(growthcurver);

data.gr = growth.data.all;

data.gr = data.gr %>%
  rename(time = Hours); # growthcurver requirement

# make data.frame of mean OD600 curve for each treatment
data.gr = data.gr %>%
  group_by(time, Treatment) %>% # group by time and treatment
  summarize(OD600_mean = OD600_mean) %>%
  ungroup %>%
  distinct();

# focus on data only up to the time of maxOD (log phase growth)

# data.frame of maxODs foreach treatment
data.maxOD = data.gr %>%
  group_by(Treatment) %>%
  mutate(maxOD = max(OD600_mean)) %>%
  filter(OD600_mean == maxOD);

# filter for first time OD reaches max OD
data.maxOD = data.maxOD %>%
  group_by(Treatment) %>%
  arrange(time) %>%
  filter(row_number()==1) %>%
  ungroup() %>%
  mutate(time_maxOD = time) %>%
  select(Treatment, time_maxOD);

data.gr = left_join(data.gr, data.maxOD, by = "Treatment");
data.gr = data.gr %>%
  filter(time < (time_maxOD + 3)) %>%
  select(time, Treatment, OD600_mean);
```

## Growthcurver calculations

```{r Growthcurver calcs}

# get list of treatments
treatments.list = unique(data.gr$Treatment);

# declare empty data.frame for fit data
fit.data.all = data.frame(Treatment = character(),
                      maxOD = double(),
                      k_maxOD = double(),
                      n0_minOD = double(),
                      r = double(),
                      genTime = double(),
                      sigma_fit = double(),
                      note = character());


for (treat in treatments.list)
{
  data.fit = data.gr %>%
    filter(Treatment == treat);
  fit.data = run_growthcurver(data.fit);
  maxOD = max(data.fit$OD600_mean);
  temp = data.frame(maxOD);
  fit.data = cbind(fit.data, maxOD);
  fit.data = fit.data %>%
    dplyr::select(Treatment, maxOD, k_maxOD, n0_minOD, r, genTime, sigma_fit, note); # order for table
  fit.data.all = rbind(fit.data.all, fit.data);
}
  
# # add fit data to growthdata
data.gr.fit = left_join(data.gr, fit.data.all, by="Treatment");
 data.gr.fit = data.gr.fit %>%
 mutate(my_fit = k_maxOD / (1 + (((k_maxOD - n0_minOD) / n0_minOD) * exp(1)^-(r * time))));

```

# Results

## Plot treatments

```{r Generate plots}

# plot blanks without correction
growth.blanks = blanks.all;

growth.cells = growth.data.all %>%
  dplyr::select(-Well, -OD600, -Butanol) %>%
  distinct();

plot.blanks = ggplot(growth.blanks, aes(x=Hours, y=Blank_mean)) +
  geom_point(size=1) +
  geom_line(size=0.1, color='black') +
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
    coord_cartesian(
    xlim = c(0, 84), 
    ylim = c(0, max(growth.data.all$OD600_mean + 0.2)))+
  scale_x_continuous(breaks=seq(0, 84, 12))+
  scale_y_continuous(breaks=seq(0, max(growth.data.all$OD600_mean + 0.2), 0.2))+
  theme_classic()+
  mytheme;

plot.cells = ggplot(growth.cells, aes(x=Hours, y=OD600_mean, group=Butanol_Percent, color=Butanol_Percent)) +
  geom_line(size=0.2, color='black') +
  geom_point(size=0.5) +
  theme_bw() +
  xlab("Hours") + 
  ylab("OD(600)") +
  #geom_line(aes(x=Hours, y=(OD600_mean + OD600_sd)))+
  #geom_line(aes(x=Hours, y = (OD600_mean - OD600_sd)))+
  facet_wrap(~ Strain) +
  coord_cartesian(
    xlim = c(0, 84), 
    ylim = c(0, max(growth.data.all$OD600_mean + 0.2)))+
  scale_x_continuous(breaks=seq(0, 84, 12))+
  scale_y_continuous(breaks=seq(0, max(growth.data.all$OD600_mean + 0.2), 0.2))+
  guides(color=guide_legend("Butanol Percent (v/v)"))+
  theme_classic()+
  mytheme;

```

```{r plot cells, fig.cap = "Fig: growth of C.phytofermentans WT and PHY24.0.6-Tom at different concentrations (v/v) of inhibitors. Plot shows mean OD600 +/- SD."}

plot.cells
ggsave(filename = data.out, plot = plot.cells);
```

## Plot growthcurver 

```{r plot growthcurver}

data.gr.fit.plot = data.gr.fit %>%
  filter(!grepl("Blank", Treatment)) %>%
  filter(time %% 2 == 0); # subsample data for plotting

growthplots = ggplot(data.gr.fit.plot, aes(x=time, y=OD600_mean))+
 facet_wrap(~ Treatment)+
 #geom_line(size=0.2, color='black') +
 geom_line(aes(x=time, y=my_fit), color='red', width = 3)+
 geom_point(size=0.1) +
 xlab("time") + ylab("OD(600)")+
 coord_cartesian(
    xlim = c(0, 80), 
    ylim = c(0, 1.2))+
 theme_classic()+
 mytheme;

growthplots

```

```{r output table}

# format data for printing
fit.data.all = fit.data.all %>%
  mutate(k_maxOD = format(k_maxOD, digits = 2, scientific=FALSE)) %>%
  select(-n0_minOD);


table1 = kable(fit.data.all, digits = 2, caption = "Growth curve data for each treatment. maxOD is measured; all other paramaters calcualated by Growthcurver. ");
table1

```

# Conclusions

1.  PHY24.0.6. grows faster than WT GS (1.21h vs 4.18h).

2.  WT grows to 0.5% (maxOD=0.4).

3.  PHY24.0.6 grows to 2% butanol (maxOD=0.76).
